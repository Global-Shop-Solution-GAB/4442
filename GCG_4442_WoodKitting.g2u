Program.Sub.ScreenSU.Start
Gui.F_WoodKit..Create
Gui.F_WoodKit..Size(24255,10170)
Gui.F_WoodKit..MinX(0)
Gui.F_WoodKit..MinY(0)
Gui.F_WoodKit..Position(0,0)
Gui.F_WoodKit..BackColor(-2147483633)
Gui.F_WoodKit..MousePointer(0)
Gui.F_WoodKit..Event(UnLoad,Form_UnLoad)
Gui.F_WoodKit..Event(Resize,Resize)
Gui.F_WoodKit..Caption("Wood Kitting (Left)")
Gui.F_WoodKit..ContextMenuCreate("ctxOverride")
Gui.F_WoodKit..ContextMenuAddItem("ctxOverride","Override",0,"Override")
Gui.F_WoodKit..ContextMenuSetItemEventHandler("ctxOverride","Override","MenuClick")
Gui.F_WoodKit..ContextMenuCreate("ctxOutside")
Gui.F_WoodKit..ContextMenuAddItem("ctxOutside","Outside",0,"Create Outside PO")
Gui.F_WoodKit..ContextMenuAddItem("ctxOutside","Remove",0,"Remove Part")
Gui.F_WoodKit..ContextMenuAddItem("ctxOutside","Override",0,"Qty Override")
Gui.F_WoodKit..ContextMenuAddItem("ctxOutside","RemoveJob",0,"Remove Job")
Gui.F_WoodKit..ContextMenuSetItemEventHandler("ctxOutside","Outside","MenuClick")
Gui.F_WoodKit..ContextMenuSetItemEventHandler("ctxOutside","Remove","MenuClick")
Gui.F_WoodKit..ContextMenuSetItemEventHandler("ctxOutside","Override","MenuClick")
Gui.F_WoodKit..ContextMenuSetItemEventHandler("ctxOutside","RemoveJob","MenuClick")
Gui.F_WoodKit.txtWO.Create(TextBox,"",True,1500,300,0,75,9420,True,0,"Arial",8,-2147483643,1)
Gui.F_WoodKit.txtWO.Event(KeyPressEnter,txtWO_KeyPressEnter)
Gui.F_WoodKit.GsGridControlA11.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA11.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA11.Position(20025,45)
Gui.F_WoodKit.GsGridControlA11.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA12.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA12.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA12.Position(22020,45)
Gui.F_WoodKit.GsGridControlA12.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA10.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA10.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA10.Position(18030,45)
Gui.F_WoodKit.GsGridControlA10.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA09.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA09.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA09.Position(16035,45)
Gui.F_WoodKit.GsGridControlA09.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA08.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA08.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA08.Position(14040,45)
Gui.F_WoodKit.GsGridControlA08.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA07.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA07.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA07.Position(12045,45)
Gui.F_WoodKit.GsGridControlA07.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA06.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA06.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA06.Position(10050,45)
Gui.F_WoodKit.GsGridControlA06.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA05.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA05.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA05.Position(8055,45)
Gui.F_WoodKit.GsGridControlA05.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA04.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA04.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA04.Position(6060,45)
Gui.F_WoodKit.GsGridControlA04.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA03.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA03.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA03.Position(4065,45)
Gui.F_WoodKit.GsGridControlA03.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA02.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA02.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA02.Position(2070,45)
Gui.F_WoodKit.GsGridControlA02.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlA01.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlA01.Size(1995,2385)
Gui.F_WoodKit.GsGridControlA01.Position(75,45)
Gui.F_WoodKit.GsGridControlA01.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB01.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB01.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB01.Position(75,2925)
Gui.F_WoodKit.GsGridControlB01.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB02.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB02.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB02.Position(2070,2925)
Gui.F_WoodKit.GsGridControlB02.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB03.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB03.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB03.Position(4065,2925)
Gui.F_WoodKit.GsGridControlB03.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB04.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB04.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB04.Position(6060,2925)
Gui.F_WoodKit.GsGridControlB04.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB05.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB05.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB05.Position(8055,2925)
Gui.F_WoodKit.GsGridControlB05.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB06.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB06.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB06.Position(10050,2925)
Gui.F_WoodKit.GsGridControlB06.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB07.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB07.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB07.Position(12045,2925)
Gui.F_WoodKit.GsGridControlB07.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB08.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB08.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB08.Position(14040,2925)
Gui.F_WoodKit.GsGridControlB08.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB09.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB09.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB09.Position(16035,2925)
Gui.F_WoodKit.GsGridControlB09.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB10.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB10.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB10.Position(18030,2925)
Gui.F_WoodKit.GsGridControlB10.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB11.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB11.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB11.Position(20025,2925)
Gui.F_WoodKit.GsGridControlB11.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlB12.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlB12.Size(1995,2385)
Gui.F_WoodKit.GsGridControlB12.Position(22020,2925)
Gui.F_WoodKit.GsGridControlB12.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.progressBarA01.Create(ProgressBar)
Gui.F_WoodKit.progressBarA01.Size(1995,315)
Gui.F_WoodKit.progressBarA01.Position(75,2475)
Gui.F_WoodKit.progressBarA02.Create(ProgressBar)
Gui.F_WoodKit.progressBarA02.Size(1995,315)
Gui.F_WoodKit.progressBarA02.Position(2070,2475)
Gui.F_WoodKit.progressBarA03.Create(ProgressBar)
Gui.F_WoodKit.progressBarA03.Size(1995,315)
Gui.F_WoodKit.progressBarA03.Position(4065,2475)
Gui.F_WoodKit.progressBarA04.Create(ProgressBar)
Gui.F_WoodKit.progressBarA04.Size(1995,315)
Gui.F_WoodKit.progressBarA04.Position(6060,2475)
Gui.F_WoodKit.progressBarA05.Create(ProgressBar)
Gui.F_WoodKit.progressBarA05.Size(1995,315)
Gui.F_WoodKit.progressBarA05.Position(8055,2475)
Gui.F_WoodKit.progressBarA06.Create(ProgressBar)
Gui.F_WoodKit.progressBarA06.Size(1995,315)
Gui.F_WoodKit.progressBarA06.Position(10050,2475)
Gui.F_WoodKit.progressBarA07.Create(ProgressBar)
Gui.F_WoodKit.progressBarA07.Size(1995,315)
Gui.F_WoodKit.progressBarA07.Position(12045,2475)
Gui.F_WoodKit.progressBarA08.Create(ProgressBar)
Gui.F_WoodKit.progressBarA08.Size(1995,315)
Gui.F_WoodKit.progressBarA08.Position(14040,2475)
Gui.F_WoodKit.progressBarA09.Create(ProgressBar)
Gui.F_WoodKit.progressBarA09.Size(1995,315)
Gui.F_WoodKit.progressBarA09.Position(16035,2475)
Gui.F_WoodKit.progressBarA10.Create(ProgressBar)
Gui.F_WoodKit.progressBarA10.Size(1995,315)
Gui.F_WoodKit.progressBarA10.Position(18030,2475)
Gui.F_WoodKit.progressBarA11.Create(ProgressBar)
Gui.F_WoodKit.progressBarA11.Size(1995,315)
Gui.F_WoodKit.progressBarA11.Position(20025,2475)
Gui.F_WoodKit.progressBarA12.Create(ProgressBar)
Gui.F_WoodKit.progressBarA12.Size(1995,315)
Gui.F_WoodKit.progressBarA12.Position(22020,2475)
Gui.F_WoodKit.progressBarB01.Create(ProgressBar)
Gui.F_WoodKit.progressBarB01.Size(1995,315)
Gui.F_WoodKit.progressBarB01.Position(75,5355)
Gui.F_WoodKit.progressBarB02.Create(ProgressBar)
Gui.F_WoodKit.progressBarB02.Size(1995,315)
Gui.F_WoodKit.progressBarB02.Position(2070,5355)
Gui.F_WoodKit.progressBarB03.Create(ProgressBar)
Gui.F_WoodKit.progressBarB03.Size(1995,315)
Gui.F_WoodKit.progressBarB03.Position(4065,5355)
Gui.F_WoodKit.progressBarB04.Create(ProgressBar)
Gui.F_WoodKit.progressBarB04.Size(1995,315)
Gui.F_WoodKit.progressBarB04.Position(6060,5355)
Gui.F_WoodKit.progressBarB05.Create(ProgressBar)
Gui.F_WoodKit.progressBarB05.Size(1995,315)
Gui.F_WoodKit.progressBarB05.Position(8055,5355)
Gui.F_WoodKit.progressBarB06.Create(ProgressBar)
Gui.F_WoodKit.progressBarB06.Size(1995,315)
Gui.F_WoodKit.progressBarB06.Position(10050,5355)
Gui.F_WoodKit.progressBarB07.Create(ProgressBar)
Gui.F_WoodKit.progressBarB07.Size(1995,315)
Gui.F_WoodKit.progressBarB07.Position(12045,5355)
Gui.F_WoodKit.progressBarB08.Create(ProgressBar)
Gui.F_WoodKit.progressBarB08.Size(1995,315)
Gui.F_WoodKit.progressBarB08.Position(14040,5355)
Gui.F_WoodKit.progressBarB09.Create(ProgressBar)
Gui.F_WoodKit.progressBarB09.Size(1995,315)
Gui.F_WoodKit.progressBarB09.Position(16035,5355)
Gui.F_WoodKit.progressBarB10.Create(ProgressBar)
Gui.F_WoodKit.progressBarB10.Size(1995,315)
Gui.F_WoodKit.progressBarB10.Position(18030,5355)
Gui.F_WoodKit.progressBarB11.Create(ProgressBar)
Gui.F_WoodKit.progressBarB11.Size(1995,315)
Gui.F_WoodKit.progressBarB11.Position(20025,5355)
Gui.F_WoodKit.progressBarB12.Create(ProgressBar)
Gui.F_WoodKit.progressBarB12.Size(1995,315)
Gui.F_WoodKit.progressBarB12.Position(22020,5355)
Gui.F_WoodKit.GsGridControlC01.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC01.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC01.Position(75,5805)
Gui.F_WoodKit.GsGridControlC01.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC02.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC02.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC02.Position(2070,5805)
Gui.F_WoodKit.GsGridControlC02.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC03.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC03.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC03.Position(4065,5805)
Gui.F_WoodKit.GsGridControlC03.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC04.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC04.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC04.Position(6060,5805)
Gui.F_WoodKit.GsGridControlC04.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC05.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC05.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC05.Position(8055,5805)
Gui.F_WoodKit.GsGridControlC05.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC06.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC06.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC06.Position(10050,5805)
Gui.F_WoodKit.GsGridControlC06.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC07.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC07.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC07.Position(12045,5805)
Gui.F_WoodKit.GsGridControlC07.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC08.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC08.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC08.Position(14040,5805)
Gui.F_WoodKit.GsGridControlC08.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC09.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC09.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC09.Position(16035,5805)
Gui.F_WoodKit.GsGridControlC09.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC10.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC10.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC10.Position(18030,5805)
Gui.F_WoodKit.GsGridControlC10.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC11.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC11.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC11.Position(20025,5805)
Gui.F_WoodKit.GsGridControlC11.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.GsGridControlC12.Create(GsGridControl)
Gui.F_WoodKit.GsGridControlC12.Size(1995,2385)
Gui.F_WoodKit.GsGridControlC12.Position(22020,5805)
Gui.F_WoodKit.GsGridControlC12.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.F_WoodKit.progressBarC01.Create(ProgressBar)
Gui.F_WoodKit.progressBarC01.Size(1995,315)
Gui.F_WoodKit.progressBarC01.Position(75,8235)
Gui.F_WoodKit.progressBarC02.Create(ProgressBar)
Gui.F_WoodKit.progressBarC02.Size(1995,315)
Gui.F_WoodKit.progressBarC02.Position(2070,8235)
Gui.F_WoodKit.progressBarC03.Create(ProgressBar)
Gui.F_WoodKit.progressBarC03.Size(1995,315)
Gui.F_WoodKit.progressBarC03.Position(4065,8235)
Gui.F_WoodKit.progressBarC04.Create(ProgressBar)
Gui.F_WoodKit.progressBarC04.Size(1995,315)
Gui.F_WoodKit.progressBarC04.Position(6060,8235)
Gui.F_WoodKit.progressBarC05.Create(ProgressBar)
Gui.F_WoodKit.progressBarC05.Size(1995,315)
Gui.F_WoodKit.progressBarC05.Position(8055,8235)
Gui.F_WoodKit.progressBarC06.Create(ProgressBar)
Gui.F_WoodKit.progressBarC06.Size(1995,315)
Gui.F_WoodKit.progressBarC06.Position(10050,8235)
Gui.F_WoodKit.progressBarC07.Create(ProgressBar)
Gui.F_WoodKit.progressBarC07.Size(1995,315)
Gui.F_WoodKit.progressBarC07.Position(12045,8235)
Gui.F_WoodKit.progressBarC08.Create(ProgressBar)
Gui.F_WoodKit.progressBarC08.Size(1995,315)
Gui.F_WoodKit.progressBarC08.Position(14040,8235)
Gui.F_WoodKit.progressBarC09.Create(ProgressBar)
Gui.F_WoodKit.progressBarC09.Size(1995,315)
Gui.F_WoodKit.progressBarC09.Position(16035,8235)
Gui.F_WoodKit.progressBarC10.Create(ProgressBar)
Gui.F_WoodKit.progressBarC10.Size(1995,315)
Gui.F_WoodKit.progressBarC10.Position(18030,8235)
Gui.F_WoodKit.progressBarC11.Create(ProgressBar)
Gui.F_WoodKit.progressBarC11.Size(1995,315)
Gui.F_WoodKit.progressBarC11.Position(20025,8235)
Gui.F_WoodKit.progressBarC12.Create(ProgressBar)
Gui.F_WoodKit.progressBarC12.Size(1995,315)
Gui.F_WoodKit.progressBarC12.Position(22020,8235)
Gui.F_WoodKit.GsgcView.Create(GsGridControl)
Gui.F_WoodKit.GsgcView.Size(23925,780)
Gui.F_WoodKit.GsgcView.Position(75,8580)
Gui.F_WoodKit.GsgcView.Event(RowCellClick,GsgcView_RowCellClick)
Gui.F_WoodKit.cmdExpand.Create(Button)
Gui.F_WoodKit.cmdExpand.Size(1080,375)
Gui.F_WoodKit.cmdExpand.Position(21420,9420)
Gui.F_WoodKit.cmdExpand.Caption("Expand All")
Gui.F_WoodKit.cmdExpand.Event(Click,GridButtons)
Gui.F_WoodKit.cmdCollapse.Create(Button)
Gui.F_WoodKit.cmdCollapse.Size(1080,375)
Gui.F_WoodKit.cmdCollapse.Position(22800,9420)
Gui.F_WoodKit.cmdCollapse.Caption("Collapse All")
Gui.F_WoodKit.cmdCollapse.Event(Click,GridButtons)

Gui.F_WoodKit.cmdRefresh.Create(Button)
Gui.F_WoodKit.cmdRefresh.Size(855,375)
Gui.F_WoodKit.cmdRefresh.Position(2940,9390)
Gui.F_WoodKit.cmdRefresh.Caption("REFRESH")
Gui.F_WoodKit.cmdRefresh.Event(Click,cmdRefresh_Click)
Gui.Form..Create
Gui.Form..Size(24255,10650)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(Resize,Resize)
Gui.Form..ContextMenuCreate("ctxOverride")
Gui.Form..ContextMenuAddItem("ctxOverride","Override",0,"Override")
Gui.Form..ContextMenuSetItemEventHandler("ctxOverride","Override","MenuClick")
Gui.Form..Caption("Wood Kitting (Right)")
Gui.Form.GsGridControlA24.Create(GsGridControl)
Gui.Form.GsGridControlA24.Size(1995,2385)
Gui.Form.GsGridControlA24.Position(22020,45)
Gui.Form.GsGridControlA24.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA23.Create(GsGridControl)
Gui.Form.GsGridControlA23.Size(1995,2385)
Gui.Form.GsGridControlA23.Position(20025,45)
Gui.Form.GsGridControlA23.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA22.Create(GsGridControl)
Gui.Form.GsGridControlA22.Size(1995,2385)
Gui.Form.GsGridControlA22.Position(18030,45)
Gui.Form.GsGridControlA22.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA21.Create(GsGridControl)
Gui.Form.GsGridControlA21.Size(1995,2385)
Gui.Form.GsGridControlA21.Position(16035,45)
Gui.Form.GsGridControlA21.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA20.Create(GsGridControl)
Gui.Form.GsGridControlA20.Size(1995,2385)
Gui.Form.GsGridControlA20.Position(14040,45)
Gui.Form.GsGridControlA20.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA19.Create(GsGridControl)
Gui.Form.GsGridControlA19.Size(1995,2385)
Gui.Form.GsGridControlA19.Position(12045,45)
Gui.Form.GsGridControlA19.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA18.Create(GsGridControl)
Gui.Form.GsGridControlA18.Size(1995,2385)
Gui.Form.GsGridControlA18.Position(10050,45)
Gui.Form.GsGridControlA18.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA17.Create(GsGridControl)
Gui.Form.GsGridControlA17.Size(1995,2385)
Gui.Form.GsGridControlA17.Position(8055,45)
Gui.Form.GsGridControlA17.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA16.Create(GsGridControl)
Gui.Form.GsGridControlA16.Size(1995,2385)
Gui.Form.GsGridControlA16.Position(6060,45)
Gui.Form.GsGridControlA16.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA15.Create(GsGridControl)
Gui.Form.GsGridControlA15.Size(1995,2385)
Gui.Form.GsGridControlA15.Position(4065,45)
Gui.Form.GsGridControlA15.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA14.Create(GsGridControl)
Gui.Form.GsGridControlA14.Size(1995,2385)
Gui.Form.GsGridControlA14.Position(2070,45)
Gui.Form.GsGridControlA14.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlA13.Create(GsGridControl)
Gui.Form.GsGridControlA13.Size(1995,2385)
Gui.Form.GsGridControlA13.Position(75,45)
Gui.Form.GsGridControlA13.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB13.Create(GsGridControl)
Gui.Form.GsGridControlB13.Size(1995,2385)
Gui.Form.GsGridControlB13.Position(75,2925)
Gui.Form.GsGridControlB13.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB14.Create(GsGridControl)
Gui.Form.GsGridControlB14.Size(1995,2385)
Gui.Form.GsGridControlB14.Position(2070,2925)
Gui.Form.GsGridControlB14.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB15.Create(GsGridControl)
Gui.Form.GsGridControlB15.Size(1995,2385)
Gui.Form.GsGridControlB15.Position(4065,2925)
Gui.Form.GsGridControlB15.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB16.Create(GsGridControl)
Gui.Form.GsGridControlB16.Size(1995,2385)
Gui.Form.GsGridControlB16.Position(6060,2925)
Gui.Form.GsGridControlB16.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB17.Create(GsGridControl)
Gui.Form.GsGridControlB17.Size(1995,2385)
Gui.Form.GsGridControlB17.Position(8055,2925)
Gui.Form.GsGridControlB17.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB18.Create(GsGridControl)
Gui.Form.GsGridControlB18.Size(1995,2385)
Gui.Form.GsGridControlB18.Position(10050,2925)
Gui.Form.GsGridControlB18.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB19.Create(GsGridControl)
Gui.Form.GsGridControlB19.Size(1995,2385)
Gui.Form.GsGridControlB19.Position(12045,2925)
Gui.Form.GsGridControlB19.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB20.Create(GsGridControl)
Gui.Form.GsGridControlB20.Size(1995,2385)
Gui.Form.GsGridControlB20.Position(14040,2925)
Gui.Form.GsGridControlB20.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB21.Create(GsGridControl)
Gui.Form.GsGridControlB21.Size(1995,2385)
Gui.Form.GsGridControlB21.Position(16035,2925)
Gui.Form.GsGridControlB21.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB22.Create(GsGridControl)
Gui.Form.GsGridControlB22.Size(1995,2385)
Gui.Form.GsGridControlB22.Position(18030,2925)
Gui.Form.GsGridControlB22.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB23.Create(GsGridControl)
Gui.Form.GsGridControlB23.Size(1995,2385)
Gui.Form.GsGridControlB23.Position(20025,2925)
Gui.Form.GsGridControlB23.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlB24.Create(GsGridControl)
Gui.Form.GsGridControlB24.Size(1995,2385)
Gui.Form.GsGridControlB24.Position(22020,2925)
Gui.Form.GsGridControlB24.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC13.Create(GsGridControl)
Gui.Form.GsGridControlC13.Size(1995,2385)
Gui.Form.GsGridControlC13.Position(75,5805)
Gui.Form.GsGridControlC13.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC14.Create(GsGridControl)
Gui.Form.GsGridControlC14.Size(1995,2385)
Gui.Form.GsGridControlC14.Position(2070,5805)
Gui.Form.GsGridControlC14.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC15.Create(GsGridControl)
Gui.Form.GsGridControlC15.Size(1995,2385)
Gui.Form.GsGridControlC15.Position(4065,5805)
Gui.Form.GsGridControlC15.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC16.Create(GsGridControl)
Gui.Form.GsGridControlC16.Size(1995,2385)
Gui.Form.GsGridControlC16.Position(6060,5805)
Gui.Form.GsGridControlC16.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC17.Create(GsGridControl)
Gui.Form.GsGridControlC17.Size(1995,2385)
Gui.Form.GsGridControlC17.Position(8055,5805)
Gui.Form.GsGridControlC17.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC18.Create(GsGridControl)
Gui.Form.GsGridControlC18.Size(1995,2385)
Gui.Form.GsGridControlC18.Position(10050,5805)
Gui.Form.GsGridControlC18.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC19.Create(GsGridControl)
Gui.Form.GsGridControlC19.Size(1995,2385)
Gui.Form.GsGridControlC19.Position(12045,5805)
Gui.Form.GsGridControlC19.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC20.Create(GsGridControl)
Gui.Form.GsGridControlC20.Size(1995,2385)
Gui.Form.GsGridControlC20.Position(14040,5805)
Gui.Form.GsGridControlC20.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC21.Create(GsGridControl)
Gui.Form.GsGridControlC21.Size(1995,2385)
Gui.Form.GsGridControlC21.Position(16035,5805)
Gui.Form.GsGridControlC21.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC22.Create(GsGridControl)
Gui.Form.GsGridControlC22.Size(1995,2385)
Gui.Form.GsGridControlC22.Position(18030,5805)
Gui.Form.GsGridControlC22.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC23.Create(GsGridControl)
Gui.Form.GsGridControlC23.Size(1995,2385)
Gui.Form.GsGridControlC23.Position(20025,5805)
Gui.Form.GsGridControlC23.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.GsGridControlC24.Create(GsGridControl)
Gui.Form.GsGridControlC24.Size(1995,2385)
Gui.Form.GsGridControlC24.Position(22020,5805)
Gui.Form.GsGridControlC24.Event(RowCellClick,GsGridControl_RowCellClick)
Gui.Form.progressBarA13.Create(ProgressBar)
Gui.Form.progressBarA13.Size(1995,315)
Gui.Form.progressBarA13.Position(75,2505)
Gui.Form.progressBarA14.Create(ProgressBar)
Gui.Form.progressBarA14.Size(1995,315)
Gui.Form.progressBarA14.Position(2070,2505)
Gui.Form.progressBarA15.Create(ProgressBar)
Gui.Form.progressBarA15.Size(1995,315)
Gui.Form.progressBarA15.Position(4065,2505)
Gui.Form.progressBarA16.Create(ProgressBar)
Gui.Form.progressBarA16.Size(1995,315)
Gui.Form.progressBarA16.Position(6060,2505)
Gui.Form.progressBarA17.Create(ProgressBar)
Gui.Form.progressBarA17.Size(1995,315)
Gui.Form.progressBarA17.Position(8055,2505)
Gui.Form.progressBarA18.Create(ProgressBar)
Gui.Form.progressBarA18.Size(1995,315)
Gui.Form.progressBarA18.Position(10050,2505)
Gui.Form.progressBarA19.Create(ProgressBar)
Gui.Form.progressBarA19.Size(1995,315)
Gui.Form.progressBarA19.Position(12045,2505)
Gui.Form.progressBarA20.Create(ProgressBar)
Gui.Form.progressBarA20.Size(1995,315)
Gui.Form.progressBarA20.Position(14040,2505)
Gui.Form.progressBarA21.Create(ProgressBar)
Gui.Form.progressBarA21.Size(1995,315)
Gui.Form.progressBarA21.Position(16035,2505)
Gui.Form.progressBarA22.Create(ProgressBar)
Gui.Form.progressBarA22.Size(1995,315)
Gui.Form.progressBarA22.Position(18030,2505)
Gui.Form.progressBarA23.Create(ProgressBar)
Gui.Form.progressBarA23.Size(1995,315)
Gui.Form.progressBarA23.Position(20025,2505)
Gui.Form.progressBarA24.Create(ProgressBar)
Gui.Form.progressBarA24.Size(1995,315)
Gui.Form.progressBarA24.Position(22020,2505)
Gui.Form.progressBarB13.Create(ProgressBar)
Gui.Form.progressBarB13.Size(1995,315)
Gui.Form.progressBarB13.Position(75,5355)
Gui.Form.progressBarB14.Create(ProgressBar)
Gui.Form.progressBarB14.Size(1995,315)
Gui.Form.progressBarB14.Position(2070,5355)
Gui.Form.progressBarB15.Create(ProgressBar)
Gui.Form.progressBarB15.Size(1995,315)
Gui.Form.progressBarB15.Position(4065,5355)
Gui.Form.progressBarB16.Create(ProgressBar)
Gui.Form.progressBarB16.Size(1995,315)
Gui.Form.progressBarB16.Position(6060,5355)
Gui.Form.progressBarB17.Create(ProgressBar)
Gui.Form.progressBarB17.Size(1995,315)
Gui.Form.progressBarB17.Position(8055,5355)
Gui.Form.progressBarB18.Create(ProgressBar)
Gui.Form.progressBarB18.Size(1995,315)
Gui.Form.progressBarB18.Position(10050,5355)
Gui.Form.progressBarB19.Create(ProgressBar)
Gui.Form.progressBarB19.Size(1995,315)
Gui.Form.progressBarB19.Position(12045,5355)
Gui.Form.progressBarB20.Create(ProgressBar)
Gui.Form.progressBarB20.Size(1995,315)
Gui.Form.progressBarB20.Position(14040,5355)
Gui.Form.progressBarB21.Create(ProgressBar)
Gui.Form.progressBarB21.Size(1995,315)
Gui.Form.progressBarB21.Position(16035,5355)
Gui.Form.progressBarB22.Create(ProgressBar)
Gui.Form.progressBarB22.Size(1995,315)
Gui.Form.progressBarB22.Position(18030,5355)
Gui.Form.progressBarB23.Create(ProgressBar)
Gui.Form.progressBarB23.Size(1995,315)
Gui.Form.progressBarB23.Position(20025,5355)
Gui.Form.progressBarB24.Create(ProgressBar)
Gui.Form.progressBarB24.Size(1995,315)
Gui.Form.progressBarB24.Position(22020,5355)
Gui.Form.progressBarC13.Create(ProgressBar)
Gui.Form.progressBarC13.Size(1995,315)
Gui.Form.progressBarC13.Position(75,8235)
Gui.Form.progressBarC14.Create(ProgressBar)
Gui.Form.progressBarC14.Size(1995,315)
Gui.Form.progressBarC14.Position(2070,8235)
Gui.Form.progressBarC15.Create(ProgressBar)
Gui.Form.progressBarC15.Size(1995,315)
Gui.Form.progressBarC15.Position(4065,8235)
Gui.Form.progressBarC16.Create(ProgressBar)
Gui.Form.progressBarC16.Size(1995,315)
Gui.Form.progressBarC16.Position(6060,8235)
Gui.Form.progressBarC17.Create(ProgressBar)
Gui.Form.progressBarC17.Size(1995,315)
Gui.Form.progressBarC17.Position(8055,8235)
Gui.Form.progressBarC18.Create(ProgressBar)
Gui.Form.progressBarC18.Size(1995,315)
Gui.Form.progressBarC18.Position(10050,8235)
Gui.Form.progressBarC19.Create(ProgressBar)
Gui.Form.progressBarC19.Size(1995,315)
Gui.Form.progressBarC19.Position(12045,8235)
Gui.Form.progressBarC20.Create(ProgressBar)
Gui.Form.progressBarC20.Size(1995,315)
Gui.Form.progressBarC20.Position(14040,8235)
Gui.Form.progressBarC21.Create(ProgressBar)
Gui.Form.progressBarC21.Size(1995,315)
Gui.Form.progressBarC21.Position(16035,8235)
Gui.Form.progressBarC22.Create(ProgressBar)
Gui.Form.progressBarC22.Size(1995,315)
Gui.Form.progressBarC22.Position(18030,8235)
Gui.Form.progressBarC23.Create(ProgressBar)
Gui.Form.progressBarC23.Size(1995,315)
Gui.Form.progressBarC23.Position(20025,8235)
Gui.Form.progressBarC24.Create(ProgressBar)
Gui.Form.progressBarC24.Size(1995,315)
Gui.Form.progressBarC24.Position(22020,8235)
Gui.Form.ddlLabelPrinter.Create(DropDownList)
Gui.Form.ddlLabelPrinter.Size(3225,330)
Gui.Form.ddlLabelPrinter.Position(1155,9390)
Gui.Form.ddlLabelPrinter.Event(GotFocus,ddlLabelPrinter_GotFocus)
Gui.Form.ddlLabelPrinter.Event(Change,ddlLabelPrinter_Change)
Gui.Form.ddlLabelPrinter.Event(LostFocus,ddlLabelPrinter_LostFocus)
Gui.Form.lblLabelPrinter.Create(Label,"Label Printer",True,1065,255,0,75,9495,True,0,"Arial",8,-2147483633,0)
Gui.Form.GsGridControlReWork.Create(GsGridControl)
Gui.Form.GsGridControlReWork.Size(23925,720)
Gui.Form.GsGridControlReWork.Position(75,8610)
Gui.Form.lblMem.Create(Label,"Memory Usage: 0 GB",True,2595,255,0,4680,9465,True,0,"Arial",8,-2147483633,0)
Gui.Form_QtyOverride..Create
Gui.Form_QtyOverride..Caption("Qty Override")
Gui.Form_QtyOverride..Size(5325,2265)
Gui.Form_QtyOverride..MinX(0)
Gui.Form_QtyOverride..MinY(0)
Gui.Form_QtyOverride..Position(0,0)
Gui.Form_QtyOverride..BackColor(-2147483633)
Gui.Form_QtyOverride..MousePointer(0)
Gui.Form_QtyOverride..Event(UnLoad,Form_QtyOverride_UnLoad)
Gui.Form_QtyOverride.lblQtyNeeded.Create(Label,"Qty Needed",True,1245,255,0,1740,555,True,0,"Arial",8,-2147483633,0)
Gui.Form_QtyOverride.lblQtytoAdd.Create(Label,"Qty To Add",True,1245,255,0,105,555,True,0,"Arial",8,-2147483633,0)
Gui.Form_QtyOverride.lblJobSuffixPart.Create(Label,"JobSuffixPart",True,1935,255,0,105,165,True,0,"Arial",8,-2147483633,0)
Gui.Form_QtyOverride.txtQtyNeeded.Create(TextBox,"",True,1215,300,0,1740,780,True,2,"Arial",8,-2147483643,1)
Gui.Form_QtyOverride.txtQtyNeeded.Locked(True)
Gui.Form_QtyOverride.txtQtyOpen.Create(TextBox,"0",True,1215,300,0,105,780,True,2,"Arial",8,-2147483643,1)
Gui.Form_QtyOverride.txtQtyOpen.NumericOnly(2)
Gui.Form_QtyOverride.txtQtyOpen.DefaultValue("0")
Gui.Form_QtyOverride.txtQtyOpen.Event(LostFocus,txtQtyOpen_Change)
Gui.Form_QtyOverride.txtQtyOpen.Event(KeyPressEnter,txtQtyOpen_KeyPressEnter)
Gui.Form_QtyOverride.cmdSubmit.Create(Button)
Gui.Form_QtyOverride.cmdSubmit.Size(855,375)
Gui.Form_QtyOverride.cmdSubmit.Position(105,1425)
Gui.Form_QtyOverride.cmdSubmit.Caption("Submit")
Gui.Form_QtyOverride.cmdSubmit.Event(Click,cmdSubmit_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.iWidth.Declare(Long)
v.Global.iHeight.Declare(Long)
v.Global.iFWidth.Declare(Long)
v.Global.iFHeight.Declare(Long)
v.Global.sPrev.Declare(String)
v.Global.sGrid.Declare(String)
v.Global.sControl.Declare(String)
v.Global.iTimer.Declare(Long,60)
v.Global.sPrinter.Declare(String)
v.Global.iFlash.Declare(Long)
Variable.Global.sGoodScan.Declare(String,"")
Variable.Global.sBadScan.Declare(String,"")
Program.Sub.Preflight.End

Program.Sub.Main.Start
f.Intrinsic.Control.Try

	V.Local.sError.Declare(String,"")
	v.Local.sRet.Declare(String)
	v.Local.sSql.Declare(String)
	
	'f.ODBC.Connection!Con.OpenConnection(v.Ambient.PDSN,v.Ambient.PUser,v.Ambient.PPass)
	F.Intrinsic.Control.CallSub(Connection,"Connect",True)
	'F.ODBC.Connection!Con.OpenCompanyConnection

	Gui.Form.GsGridControlReWork.Visible(False)
	
	Gui.Form.lblMem.Anchor(6)
	
	'setting path for wav file
	F.Intrinsic.String.Build("{0}\GCG_4442_GoodScan.wav",V.Caller.GasDir,V.Global.sGoodScan)
	F.Intrinsic.String.Build("{0}\GCG_4442_BadScan.wav",V.Caller.GasDir,V.Global.sBadScan)
	
	f.Intrinsic.UI.InvokeWaitDialog("Starting Program")
	
	v.Global.iWidth.Set(v.Screen.F_WoodKit.Width)
	v.Global.iHeight.Set(v.Screen.F_WoodKit.Height)
	v.Global.iFWidth.Set(v.Screen.Form.Width)
	v.Global.iFHeight.Set(v.Screen.Form.Height)
	Gui.F_WoodKit.txtWO.Anchor(6)
	Gui.F_WoodKit.cmdExpand.Anchor(10)
	Gui.F_WoodKit.cmdCollapse.Anchor(10)
	Gui.F_WoodKit.GsgcView.Anchor(15)
	Gui.F_WoodKit.cmdRefresh.Anchor(6)
	Gui.Form.lblLabelPrinter.Anchor(6)
	Gui.Form.ddlLabelPrinter.Anchor(6)
	
	Gui.F_WoodKit.txtWO.Enabled(False)
	
	f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN","OR",v.Caller.User.Trim,=,"WKTOUT")
		f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
			Gui.Form.lblLabelPrinter.Visible(True)
			Gui.Form.ddlLabelPrinter.Visible(True)
			
			Gui.F_WoodKit.txtWO.Enabled(True)
			
			'F.ODBC.Connection!Con.OpenCompanyConnection
			F.ODBC.Connection!Con.Execute("Delete From GCG_4442_Empty_Bins")
			'F.ODBC.Connection!Con.Close
			
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.BlockEvents
			Gui.F_WoodKit.timer1.Create(Timer)
			Gui.F_WoodKit.timer1.Size(500,500)
			Gui.F_WoodKit.timer1.Position(2520,9390)
			Gui.F_WoodKit.timer1.Interval(1000)
			Gui.F_WoodKit.timer1.Event(Timer,timer1_Timer)
			'Gui.F_WoodKit.lblTimer.Create(Label,"60",True,675,255,0,1920,9480,True,0,"Arial",12,-2147483633,0)
			'Gui.F_WoodKit.lblTimer.FontStyle(True,False,False,False,False)
			
			Gui.F_WoodKit.txtWO.Enabled(False)
			'Gui.F_WoodKit.lblTimer.Visible(True)
			'Gui.F_WoodKit.lblTimer.Anchor(6)
			Gui.F_WoodKit.timer1.Enabled(True)
			F.Intrinsic.Control.UnBlockEvents
		F.Intrinsic.Control.EndIf
		
		Gui.F_WoodKit.GsgcView.ContextMenuAttach("ctxOutside")
		
		'F.ODBC.Connection!ConC.OpenConnection(V.Ambient.Ccon,V.Ambient.Cuser,V.Ambient.Cpass)
		
		'creating datatable for sentinel enabled printers
		V.Local.sSql.Set("Select PrinterName, rtrim(Sentinelalias) From Server_Printers Where Sentinelenabled = 1 Order By Sentinelalias")
		F.Data.Dictionary.CreateFromSQL("Printer","Con",V.Local.sSql)
	
		Gui.Form.ddlLabelPrinter.AddItem(" ",0)
		Gui.Form.ddlLabelPrinter.AddItems("Dictionary","Printer")
	
		F.Data.Dictionary.Close("Printer")
		'Set the captions with the user name
		f.Intrinsic.String.Build("{0} Wood Kitting (Left)",v.Caller.User.Trim,v.Local.sRet)
		Gui.F_WoodKit..Caption(v.Local.sRet)
		f.Intrinsic.String.Build("{0} Wood Kitting (Right)",v.Caller.User.Trim,v.Local.sRet)
		Gui.Form..Caption(v.Local.sRet)
		'Hide the refresh button
		Gui.F_WoodKit.cmdRefresh.Visible(False)
		
		'F.ODBC.Connection!ConC.Close
		
		'Get Label Printer
	'	f.Intrinsic.Control.CallSub(PrinterLocation)
		
		'Clean up old xml files
		f.Intrinsic.Control.CallSub(CleanupXML)
		'populate the DT's
		F.Intrinsic.Control.CallSub(buildemptydatatables)
		
		gui.F_WoodKit.txtWO.SetFocus
		gui.F_WoodKit.txtWO.SelectAll
		
	f.Intrinsic.Control.Else
		Gui.Form.lblLabelPrinter.Visible(False)
		Gui.Form.ddlLabelPrinter.Visible(False)
		
		'Set the captions with the user name
		f.Intrinsic.String.Build("{0} Wood Kitting (Left)","View",v.Local.sRet)
		Gui.F_WoodKit..Caption(v.Local.sRet)
		f.Intrinsic.String.Build("{0} Wood Kitting (Right)","View",v.Local.sRet)
		Gui.Form..Caption(v.Local.sRet)
		'We are just viewing so disable all of the controls.
		Gui.F_WoodKit.txtWO.Enabled(False)
		'Gui.F_WoodKit.lblTimer.Visible(False)
		
		'Populate the grids
		F.Intrinsic.Control.CallSub(buildemptydatatables)
		
	f.Intrinsic.Control.EndIf
	
	Gui.Form.GsGridControlReWork.Anchor(15)
	
	f.Intrinsic.UI.CloseWaitDialog
	
	Gui.Form.lblMem.Visible(False)
	
	gui.F_WoodKit..Show
	Gui.Form..Show
	
	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.TryCatch.Start
v.Local.sError.Declare(String)
Function.Intrinsic.String.Concat("Project: GCG_4442_WoodKitting.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",v.Args.Sub,V.Ambient.NewLine,"Error Occurred ",V.Args.Error," with description ",v.Args.Desc,V.Local.sError)
F.Intrinsic.UI.Msgbox(V.Local.sError)
f.Intrinsic.Control.CallSub(Form_UnLoad)
Program.Sub.TryCatch.End

Program.Sub.Form_UnLoad.Start
F.Intrinsic.Control.Try
	'F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
		F.Intrinsic.Control.CallSub(Connection,"Connect",False)
	'F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.End
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Form_UnLoad.End

Program.Sub.BuildEmptyDatatables.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	V.Local.i.Declare(Long)
	V.Local.sDatatable.Declare(String)
	V.Local.iCount.Declare(String)
	V.Local.sGrid.Declare(String)
	V.Local.iC.Declare(Long)
	V.Local.sSql.Declare(String)
	v.Local.sProg.Declare(String)
	v.Local.sSplit.Declare(String)
	v.Local.sType.Declare(String)
	v.Local.sForm.Declare(String)
F.Intrinsic.Control.CallSub(Connection,"Connect",True)

'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.UI.ChangeWaitStatus("Populating Screen")
	'Looping through the max amount of grids which is 24
	'in each loop we will try to populate A, B, and C grids
	f.Intrinsic.String.Split("A*!*B*!*C","*!*",v.Local.sType)
	F.Intrinsic.Control.For(V.Local.i,1,24,1)
		F.Intrinsic.String.Format(V.Local.i,"00",V.Local.sDatatable)
		'We will do A first
		f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sType.UBound,1)
			F.Intrinsic.String.Format(V.Local.i,"00",V.Local.sDatatable)
			'Set form name depending on the screen
			f.Intrinsic.Control.If(v.Local.i,<,13)
				v.Local.sForm.Set("F_WoodKit")
			f.Intrinsic.Control.Else
				v.Local.sForm.Set("Form")
			f.Intrinsic.Control.EndIf
			'Build our DB string
			f.Intrinsic.String.Build("{0}{1}",v.Local.sType(v.Local.iCount),v.Local.sDatatable,v.Local.sDatatable)
			'Load the data from the tables if it exists
			F.Intrinsic.String.Build("Select * From GCG_4442_WOOD_KIT Where Rec_ID = '{0}'",V.Local.sDatatable,V.Local.sSql)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			
			F.ODBC.Connection!Con.OpenLocalRecordsetRW("rst",V.Local.sSql)
			'Create DT and create our only column
			f.Intrinsic.Control.If(v.DataTable.[v.Local.sDatatable].Exists,=,True)
				f.Data.DataTable.Close(v.Local.sDatatable)
			f.Intrinsic.Control.EndIf
			F.Data.DataTable.Create(V.Local.sDatatable,True)
			F.Data.DataTable.AddColumn(V.Local.sDatatable,V.Local.sDatatable,"String")
			v.Local.sSplit.Redim(0,0)
			'If we have something then add the data to the DT if we don't then just populate all the rows with blanks
			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
				F.Intrinsic.Control.For(V.Local.iC,0,4,1)
					F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,"")
				F.Intrinsic.Control.Next(V.Local.iC)
				f.Intrinsic.String.Build("Kit Complete{0}Assemble{0}Next",v.Ambient.NewLine,v.Local.sSql)
				F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,v.Local.sSql)
				F.Intrinsic.String.Build("ProgressBar{0}",v.Local.sDatatable,V.Local.sProg)
				Gui.[v.Local.sForm].[v.Local.sProg].Value(0)
			F.Intrinsic.Control.Else
				'Add each row from the table. Job, SO, Part, Status, x of x, next button
				F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,V.ODBC.con!rst.FieldValTrim!JOB)
				F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,V.ODBC.con!rst.FieldValTrim!ORDER_NO)
				F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,V.ODBC.con!rst.FieldValTrim!Part)
				F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,"STATUS")
				'split the status so we can set the progress bar max and value
				f.Intrinsic.String.Split(V.ODBC.con!rst.FieldValTrim!Kitting_Status,"OF",v.Local.sSplit)
				v.Local.sSplit.RedimPreserve(0,1)
				F.Intrinsic.String.Build("ProgressBar{0}",v.Local.sDatatable,V.Local.sProg)
				f.Intrinsic.Control.If(v.Local.sSplit(1).Long,<>,0)
					Gui.[v.Local.sForm].[v.Local.sProg].Max(v.Local.sSplit(1).Long)
				f.Intrinsic.Control.EndIf
				'adding this code in until the bug where qty scanned is > than max qty. RLK  (so program still opens and not crash octsrs)
				F.Intrinsic.Control.If(V.Local.sSplit(0).Long,>,V.Local.sSplit(1).Long)
					F.Intrinsic.String.Build("Select Sum(Qty_Completed) as Qty_Completed From GCG_4442_Wood_Prog Where Grid = '{0}'",V.Local.sDatatable,V.Local.sSql)
'					F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'						F.ODBC.Connection!Con.OpenCompanyConnection
'					F.Intrinsic.Control.EndIf
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSql,V.Local.sSql)
					F.Intrinsic.Control.If(V.Local.sSql.Long,>,V.Local.sSplit(1).Long)
						Gui.[v.Local.sForm].[v.Local.sProg].Value(V.Local.sSplit(1).Long)
					F.Intrinsic.Control.Else
						Gui.[v.Local.sForm].[v.Local.sProg].Value(V.Local.sSql.Long)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Build("{0} OF {1}",V.Local.sSql.Long,V.Local.sSplit(1).Long,V.Local.sSql)
					F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,V.Local.sSql)
					F.Intrinsic.String.Build("Update GCG_4442_Wood_Kit Set Kitting_Status = '{0}' Where Rec_ID = '{1}'",V.Local.sSql,V.Local.sDatatable,V.Local.sSql)
'					F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'						F.ODBC.Connection!Con.OpenCompanyConnection
'					F.Intrinsic.Control.EndIf
					F.ODBC.Connection!Con.Execute(V.Local.sSql)
				F.Intrinsic.Control.Else
					Gui.[v.Local.sForm].[v.Local.sProg].Value(v.Local.sSplit(0).Long)
					F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,V.ODBC.con!rst.FieldValTrim!Kitting_Status)
				F.Intrinsic.Control.EndIf
				'Get the first open WC from the parent job and set it in the next button
				f.Intrinsic.String.Build("SELECT TOP 1 RTRIM(PART) as Part FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '000' AND LMO = 'L' AND SEQ < '995000' AND DATE_COMPLETED = '1900-01-01' ORDER BY SEQ ASC",v.ODBC.Con!rst.FieldValTrim!JOB,v.Local.sSql)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				f.ODBC.Connection!Con.OpenLocalRecordsetRO("rstWC",v.Local.sSql)
				f.Intrinsic.Control.If(v.ODBC.Con!rstWC.EOF,=,False)
					f.Intrinsic.String.Build("Kit Complete{0}{1} Next",v.Ambient.NewLine,v.ODBC.Con!rstWC.FieldValTrim!PART,v.Local.sSql)
				f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Kit Complete{0}Assemble{0}Next",v.Ambient.NewLine,v.Local.sSql)
				f.Intrinsic.Control.EndIf
				f.ODBC.Con!rstWC.Close
				F.Data.DataTable.AddRow(V.Local.sDatatable,V.Local.sDatatable,v.Local.sSql)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rst.Close
			'Start building the GV looks
			F.Intrinsic.String.Build("GsGridControl{0}",V.Local.sDatatable,V.Local.sGrid)
			Gui.[v.Local.sForm].[V.Local.sGrid].AddGridviewFromDatatable(V.Local.sDatatable,V.Local.sDatatable)
			Gui.[v.Local.sForm].[V.Local.sGrid].SetColumnProperty(V.Local.sDatatable,V.Local.sDatatable,"readonly","True")
			Gui.[v.Local.sForm].[V.Local.sGrid].SetColumnProperty(V.Local.sDatatable,V.Local.sDatatable,"AllowEdit","False")
			
			F.Intrinsic.String.Build("ProgressBar{0}",V.Local.i,V.Local.sProg)
			'Gui.[v.Local.sForm].[v.Local.sProg].Min(0)
			'If our x of x equal each other then we can show the button
			f.Intrinsic.Control.If(v.Local.sSplit(0).Long,=,v.Local.sSplit(1).Long,"AND",v.Local.sSplit(1).Long,<>,0)
				Gui.[v.Local.sForm].[V.Local.sGrid].HideRow(V.Local.sDatatable,5,False)
			f.Intrinsic.Control.Else
				Gui.[v.Local.sForm].[V.Local.sGrid].HideRow(V.Local.sDatatable,5,True)
			f.Intrinsic.Control.EndIf
			Gui.[v.Local.sForm].[V.Local.sGrid].SetCellAppearance(V.Local.sDatatable,0,5,"backcolor","Lime")
			Gui.[v.Local.sForm].[V.Local.sGrid].SetCellAppearance(V.Local.sDatatable,0,5,"fontbold",True)
			Gui.[v.Local.sForm].[V.Local.sGrid].SetCellAppearance(V.Local.sDatatable,0,5,"Halignment","Center")
			Gui.[v.Local.sForm].[V.Local.sGrid].SetCellAppearance(V.Local.sDatatable,0,5,"valignment","Center")
	'		Gui.[v.Local.sForm].[V.Local.sGrid].SetCellAppearance(V.Local.sDatatable,0,2,"wordwrap","nowrap")
			Gui.[v.Local.sForm].[v.Local.sGrid].SetGridViewProperty(v.Local.sDatatable,"OptionsViewRowAutoHeight",True)
			Gui.[v.Local.sForm].[v.Local.sGrid].SetGridViewProperty(v.Local.sDatatable,"AllowSort",False)
			Gui.[v.Local.sForm].[v.Local.sGrid].SetGridViewProperty(v.Local.sDatatable,"AllowFilter",False)
			Gui.[v.Local.sForm].[v.Local.sGrid].SetGridViewProperty(v.Local.sDatatable,"AllowColumnMoving",False)
			Gui.[v.Local.sForm].[V.Local.sGrid].SetColumnProperty(V.Local.sDatatable,V.Local.sDatatable,"CellWordWrap","wrap")
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"CellHAlignment","center")
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"CellVAlignment","center")
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"CellFontBold",True)
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"HeaderHAlignment","center")
		'	Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"HeaderForeColor","Red")
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"HeaderFontBold",True)
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"headerbackcolor","#0000ff")
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"headerforecolor","White")
			Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Local.sDatatable,v.Local.sDatatable,"headerfontsize",15)
		
			Gui.[v.Local.sForm].[V.Local.sGrid].MainView(V.Local.sDatatable)
		f.Intrinsic.Control.Next(v.Local.iCount)
	F.Intrinsic.Control.Next(v.Local.i)
	
	'Add the bottom Component grid
	f.Intrinsic.Control.If(v.DataTable.ComponentPartsParent$Parts.Exists,=,True)
		f.Data.DataTable.Close("ComponentPartsParent$Parts")
		f.Data.DataTable.Close("ComponentPartsParent")
	f.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("ComponentPartsParent","Con","SELECT JOB, SUFFIX, RTRIM(PART) AS PART, RTRIM(DESCRIPTION) AS DESCRIPTION, QTY_ORDER, QTY_COMPLETED FROM V_JOB_HEADER WHERE SUFFIX > '000' AND JOB = 'ASDFFASDFASDF' ",True)
	f.Data.DataView.Create("ComponentPartsParent","ComponentParentView",22,"JOB = ''","")
	'Add all the children
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("ComponentPartsParent$Parts","Con","SELECT JOB, SUFFIX, SEQ, RTRIM(PART) AS PART, RTRIM(DESCRIPTION) AS DESCRIPTION, HOURS_ESTIMATED, HOURS_ACTUAL FROM V_JOB_OPERATIONS WHERE LMO = 'L'  AND SEQ < '995000' AND SUFFIX > '000' AND JOB = 'ASDFADSFASDFSFA'  ORDER BY JOB, SEQ ASC ",True)
	f.Data.DataView.Create("ComponentPartsParent$Parts","ComponentPartsView",22)
	
	'Add relation on job and parent_Suffix
	F.Intrinsic.Control.Try
	f.Data.DataTable.AddRelation("ComponentPartsParent","JOB*!*SUFFIX","ComponentPartsParent$Parts","JOB*!*SUFFIX")
	F.Intrinsic.Control.Catch
		'adding code in on vacation this is to keep program from crashing until I can look more into whats causing the issue.
		'rlk 7/27/2018
	F.Intrinsic.Control.EndTry
	
	Gui.F_WoodKit.GsgcView.AddGridviewFromDataview("ComponentParentGrid","ComponentPartsParent","ComponentParentView")
	Gui.F_WoodKit.GsgcView.AddGridviewFromDataview("ComponentPartsGrid","ComponentPartsParent","ComponentPartsView")
	
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","Caption","Qty Needed")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_COMPLETED","Caption","Qty Scanned")
	
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ESTIMATED","Caption","Estimated Hours")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ACTUAL","Caption","Actual Hours")
	
	'Set Header back color
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","JOB","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","SUFFIX","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","PART","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","DESCRIPTION","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_COMPLETED","HeaderBackColor","#0000ff")
	'Set Header Fore color
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","JOB","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","SUFFIX","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","PART","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","DESCRIPTION","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_COMPLETED","HeaderForeColor","White")
		
	Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentParentGrid","readonly",True)
	Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentPartsGrid","readonly",True)
	Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentParentGrid","Editable",False)
	Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentPartsGrid","Editable",False)
	
	Gui.F_WoodKit.GsgcView.MainView("ComponentParentGrid")
	
	'Create an empty grid for not viewing anything
	f.Intrinsic.Control.If(v.DataTable.Empty.Exists,=,True)
		f.Data.DataTable.Close("Empty")
	f.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("Empty","Con","SELECT JOB, SUFFIX, RTRIM(PART) AS PART, RTRIM(DESCRIPTION) AS DESCRIPTION, QTY_ORDER, QTY_COMPLETED FROM V_JOB_HEADER WHERE SUFFIX > '000' AND JOB = 'ASDFFASDFASDF' ",True)
	f.Data.DataView.Create("Empty","Empty",22,"JOB = ''","")
	Gui.F_WoodKit.GsgcView.AddGridviewFromDataview("Empty","Empty","Empty")
	
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","QTY_ORDER","Caption","Qty Needed")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","QTY_COMPLETED","Caption","Qty Scanned")
	
	'Set Header back color
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","JOB","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","SUFFIX","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","PART","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","DESCRIPTION","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","QTY_ORDER","HeaderBackColor","#0000ff")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","QTY_COMPLETED","HeaderBackColor","#0000ff")
	'Set Header Fore color
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","JOB","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","SUFFIX","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","PART","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","DESCRIPTION","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","QTY_ORDER","HeaderForeColor","White")
	Gui.F_WoodKit.GsgcView.SetColumnProperty("Empty","QTY_COMPLETED","HeaderForeColor","White")
		
	'Create the Wood Progress table
	f.Intrinsic.Control.If(v.DataTable.Progress.Exists,=,True)
		f.Data.DataTable.Close("Progress")
	f.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("Progress","Con","SELECT * FROM GCG_4442_WOOD_PROG",True)
	f.Data.DataView.Create("Progress","ProgressView",22,"","PRIORITY ASC, JOB ASC, SUFFIX ASC")
	
	'Creae an empty grid for not viewing anything
	F.Intrinsic.Control.If(V.DataTable.EmptyRework.Exists,=,True)
		F.Data.DataTable.Close("EmptyRework")
	F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("EmptyRework","con","SELECT JOB, SUFFIX, RTRIM(PART) AS PART, RTRIM(DESCRIPTION) AS DESCRIPTION, QTY_ORDER, RTRIM(COMMENTS_1) as COMMENTS_1,'' as STATUS, '' AS GRID FROM V_JOB_HEADER WHERE SUFFIX > '000' AND JOB = 'ASDFFASDFASDF' ",True)
	f.Data.DataView.Create("EmptyRework","EmptyRework",22,"JOB = ''","")
	Gui.Form.GsGridControlReWork.AddGridviewFromDataview("EmptyRework","EmptyRework","EmptyRework")
	
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","JOB","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","Suffix","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","Qty_Order","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","Grid","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","QTY_ORDER","Caption","Qty Needed")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","COMMENTS_1","Caption","Comment")
		
	'Set Header back color
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","JOB","HeaderBackColor","#0000ff")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","SUFFIX","HeaderBackColor","#0000ff")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","PART","HeaderBackColor","#0000ff")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","DESCRIPTION","HeaderBackColor","#0000ff")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","QTY_ORDER","HeaderBackColor","#0000ff")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","COMMENTS_1","HeaderBackColor","#0000ff")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","GRID","HeaderBackColor","#0000ff")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","STATUS","HeaderBackColor","#0000ff")
	
	'Set Header Fore color
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","JOB","HeaderForeColor","White")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","SUFFIX","HeaderForeColor","White")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","PART","HeaderForeColor","White")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","DESCRIPTION","HeaderForeColor","White")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","QTY_ORDER","HeaderForeColor","White")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","COMMENTS_1","HeaderForeColor","White")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","GRID","HeaderForeColor","White")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","STATUS","HeaderForeColor","White")
	
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","JOB","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","Suffix","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","Qty_Order","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","Grid","MaxWidth","100")
	Gui.Form.GsGridControlReWork.SetColumnProperty("EmptyRework","STATUS","MaxWidth","100")
	
	Gui.Form.GsGridControlReWork.SetGridviewProperty("EmptyRework","Editable",False)
	Gui.Form.GsGridControlReWork.SetGridviewProperty("EmptyRework","readonly",True)
	
	Gui.Form.GsGridControlReWork.MainView("EmptyRework")
	
	f.Intrinsic.UI.ChangeWaitStatus("Finished Populating Screen")

'F.Intrinsic.Control.CallSub(Connection,"Connect",False)
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
'		F.ODBC.Connection!Con.Close
'	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.BuildEmptyDatatables.End

Program.Sub.txtWO_KeyPressEnter.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	V.Local.sJob.Declare(String)
	V.Local.sSeq.Declare(String)
	V.Local.sSuffix.Declare(String)
	
	gui.F_WoodKit.txtWO.Enabled(False)
	F.Intrinsic.String.Split(V.Screen.F_WoodKit!txtWO.Text,"%",V.Local.sJob)
	v.Local.sJob.RedimPreserve(0,1)
	f.Intrinsic.Control.If(v.Local.sJob(1).Trim,=,"")
		gui.F_WoodKit.txtWO.Enabled(True)
		gui.F_WoodKit.txtWO.SetFocus
		gui.F_WoodKit.txtWO.SelectAll
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.BlockEvents
	
	F.Intrinsic.String.RPad(V.Local.sJob(1),"0",15,V.Local.sJob)
	v.Local.sJob.RedimPreserve(0,0)
	
	F.Intrinsic.String.Right(V.Local.sJob,6,V.Local.sSeq)
	F.Intrinsic.String.Mid(V.Local.sJob,7,3,V.Local.sSuffix)
	F.Intrinsic.String.Left(V.Local.sJob,6,V.Local.sJob)
	gui.F_WoodKit.txtWO.Text(V.Local.sJob.UCase)
	V.Local.sJob.Set(V.Local.sJob.UCase)
	
	F.Intrinsic.UI.InvokeWaitDialog("Lookup Sub.........")
	f.Intrinsic.Control.CallSub(LookUp,"Job",v.Local.sJob,"Suffix",v.Local.sSuffix,"Seq",v.Local.sSeq)
	
	'They just scanned so check and see if the Job is in our Dictionary.
	'f.Intrinsic.Control.If(v.Dictionary.PosRef![v.Screen.F_WoodKit!txtWO.Text],<>,"")
	f.Intrinsic.Control.If(v.Args.Step,=,"Update")
		F.Intrinsic.UI.ChangeWaitStatus("UpdateExisiting Sub.........")
		'We have the job on the screen already so we just need to update it.
		f.Intrinsic.Control.CallSub(UpdateExisting,"DT",v.Args.DT,"Job",v.Local.sJob,"Suffix",v.Local.sSuffix,"Seq",v.Local.sSeq)
	f.Intrinsic.Control.Else
		F.Intrinsic.UI.ChangeWaitStatus("NewJob Sub.........")
		'The job doesn't exist so we need to add it to the first open slot.
		f.Intrinsic.Control.CallSub(NewJob,"Job",v.Local.sJob,"Suffix",v.Local.sSuffix,"Seq",v.Local.sSeq)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.UI.CloseWaitDialog
	
	f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.Control.DoEvents
	f.Intrinsic.UI.Sleep(1)
	gui.F_WoodKit.txtWO.Enabled(True)
	gui.F_WoodKit.txtWO.SetFocus
	gui.F_WoodKit.txtWO.SelectAll

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.txtWO_KeyPressEnter.End

Program.Sub.GsGridControl_RowCellClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sRet.Declare(String)
	v.Local.sGrid.Declare(String)
	v.Local.sSql.Declare(String)
	v.Local.sProg.Declare(String)
	v.Local.sHold.Declare(String)
	v.Local.iCount.Declare(Long)
	v.Local.iRow.Declare(Long)
	v.Local.iSeq.Declare(Long)
	v.Local.sName.Declare(String)
	v.Local.bExist.Declare(Boolean)
	v.Local.sXML.Declare(String)
	v.Local.sFilter.Declare(String)
	v.Local.iBIRunID.Declare(Long)
	v.Local.iRptID.Declare(Long)
	v.Local.iLogID.Declare(Long)
	v.Local.sFile.Declare(String)
	v.Local.sXML2.Declare(String)
	v.Local.sPervasiveTable.Declare(String)
	V.Local.sParentSuffix.Declare(String)
	V.Local.sPrinter.Declare(String)
	V.Local.sParentParentSuffix.Declare(String)
	V.Local.sParentPart.Declare(String)
	
	f.Intrinsic.Control.If(v.Args.BUTTON,=,"Left")
	
		'Kitting Complete button was pressed 
		F.Intrinsic.Control.If(V.Args.RowIndex,=,5)
			f.Intrinsic.Control.If(v.Caller.User.Trim,<>,"WKTIN","AND",v.Caller.User.Trim,<>,"WKTOUT")
'			f.Intrinsic.Control.If(v.Caller.User.Trim,<>,"WKTIN")
				'View user pressed the button, that's not okay with me.
				'DENIED!
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			v.Local.sRet.Set(v.Args.Column)
			f.Intrinsic.Variable.ArgExists("Override",v.Local.bExist)
			f.Intrinsic.Control.If(v.Local.bExist,=,True)
				F.Intrinsic.String.Build("Delete from GCG_4442_WPROG_HIST Where Grid = '{0}' and (Check_Out is null)",V.Args.Column,V.Local.sSql)
				f.Intrinsic.UI.Msgbox("Do you want to Print a Label?","Attention",3,v.Local.iCount)
				f.Intrinsic.Control.If(v.Local.iCount,=,6)
					'F.ODBC.Connection!Con.OpenCompanyConnection
					F.ODBC.Connection!Con.Execute(V.Local.sSql)
					'F.ODBC.Connection!Con.Close
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Else
				v.Local.iCount.Set(6)
			f.Intrinsic.Control.EndIf
			
			f.Intrinsic.Control.If(v.Local.iCount,=,6)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				'Create Label Info
				f.Intrinsic.String.Build("Grid = '{0}' ",v.Local.sRet,v.Local.sFilter)
				f.Intrinsic.Control.If(V.DataView.Progress!SuffixTemp.Exists)
					f.Data.DataView.Close("Progress","SuffixTemp")
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Create("Progress","SuffixTemp",22,v.Local.sFilter,"")
				F.Intrinsic.String.Build("Select PARENT_SUFFIX_PARENT From V_Job_Header Where Job = '{0}' and Suffix = '{1}'",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldVal,V.DataView.Progress!SuffixTemp(V.DataView.Progress!SuffixTemp.RowCount--).Suffix!FieldValTrim,V.Local.sSql)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSql,V.Local.sParentSuffix)
				F.Intrinsic.Control.If(V.Local.sParentSuffix.Length,=,0)
					V.Local.sParentSuffix.Set("000")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Build("Select PARENT_SUFFIX_PARENT From V_Job_Header Where Job = '{0}' and Suffix = '{1}'",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldVal,V.Local.sParentSuffix,V.Local.sSql)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSql,V.Local.sParentParentSuffix)
				F.Intrinsic.Control.If(V.Local.sParentParentSuffix.Length,=,0)
					V.Local.sParentParentSuffix.Set("000")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Build("Select Part From V_Job_Header Where Job = '{0}' and Suffix = '{1}'",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldVal,V.Local.sParentParentSuffix,V.Local.sSql)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSql,V.Local.sParentPart)
				F.Intrinsic.Control.If(V.Local.sParentPart.Length,=,0)
					V.Local.sParentPart.Set("")
				F.Intrinsic.Control.EndIf
	'			f.Intrinsic.String.Build("SELECT * FROM GCG_4442_LABEL_DATA WHERE JOB = '{0}' AND SUFFIX = '000' ",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldVal,v.Local.sSql)
				f.Intrinsic.String.Build("SELECT * FROM GCG_4442_LABEL_DATA WHERE JOB = '{0}' AND SUFFIX = '{1}' ",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldVal,V.Local.sParentSuffix,v.Local.sSql)
				V.Local.sPervasiveTable.Set("GCG_4442_LABEL_DATA")
				f.Intrinsic.Control.If(v.DataTable.GCGLabel.Exists,=,True)
					f.Data.DataTable.Close("GCGLabel")
				f.Intrinsic.Control.EndIf
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				f.Data.DataTable.CreateFromSQL("GCGLabel","Con",v.Local.sSql,True)
	
				'Add the basic info I have to the row.
				'Need to get our latest Instance if we have one.
				f.Intrinsic.Control.If(v.DataTable.GCGLabel.RowCount,>,0)
					f.Data.DataTable.Compute("GCGLabel","MAX([INSTANCE])","",v.Local.iCount)
					f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
					f.Intrinsic.String.Format(v.Local.iCount,"00",v.Local.sHold)
					'Add 1 more to count to get number so far
					f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
				f.Intrinsic.Control.Else
					v.Local.iCount.Set(1)
					v.Local.sHold.Set("00")
				f.Intrinsic.Control.EndIf
				'We need to get the Part Descripiton, and the total amount of Parts for the Job.
	'			f.Intrinsic.String.Build("SELECT RTRIM(DESCRIPTION) AS DESCRIPTION, QTY_ORDER FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '000' ",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,v.Local.sSql)
				f.Intrinsic.String.Build("SELECT RTRIM(DESCRIPTION) AS DESCRIPTION, QTY_ORDER FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}' ",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,V.Local.sParentSuffix,v.Local.sSql)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				f.ODBC.Connection!Con.OpenLocalRecordSetRO("rstDesc",v.Local.sSql)
				f.Intrinsic.Control.If(v.ODBC.Con!rstDesc.EOF,=,False)
					v.Local.sGrid.Set(v.ODBC.Con!rstDesc.FieldValTrim!DESCRIPTION)
					v.Local.sProg.Set(v.ODBC.Con!rstDesc.FieldValLong!QTY_ORDER)
					v.Local.sSql.Set(v.ODBC.Con!rstDesc.FieldValLong!QTY_ORDER)
				f.Intrinsic.Control.Else
					v.Local.sProg.Set("0")
					v.Local.sSql.Set("0")
				f.Intrinsic.Control.EndIf
				f.ODBC.Con!rstDesc.Close
				
				f.Data.DataTable.AddRow("GCGLabel","JOB",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,"SUFFIX",V.Local.sParentSuffix,"INSTANCE",v.Local.sHold,"PART",v.DataTable.[v.Local.sRet](2).[v.Local.sRet]!FieldValTrim,"PARENT_JOB",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,"PARENT_SUFFIX",V.Local.sParentParentSuffix,"PARENT_PART",V.Local.sParentPart,"DESCRIPTION",v.Local.sGrid,"RUN_QTY",v.Local.iCount,"TOTAL_WO_QTY",v.Local.sSql.Long,"ORDER_NO",v.DataTable.[v.Local.sRet](1).[v.Local.sRet]!FieldValTrim)
				'we need to get the Row we are on and do another loop for each Labor Sequence
				v.Local.iRow.Set(v.DataTable.GCGLabel.RowCount--)
				v.Local.iSeq.Set(1)
	'			F.Intrinsic.String.Build("SELECT TOP 7 SEQ, LMO, RTRIM(PART) AS PART, '$%' + JOB + SUFFIX + SEQ AS SEQ_BC FROM V_JOB_OPERATIONS WHERE LMO = 'L' AND SEQ < '995000' AND JOB = '{0}' AND SUFFIX = '000' ORDER BY SEQ ASC",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,v.Local.sSQL)
				F.Intrinsic.String.Build("SELECT TOP 7 SEQ, LMO, RTRIM(PART) AS PART, '$%' + JOB + SUFFIX + SEQ AS SEQ_BC FROM V_JOB_OPERATIONS WHERE LMO = 'L' AND SEQ < '995000' AND JOB = '{0}' AND SUFFIX = '{1}' ORDER BY SEQ ASC",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,V.Local.sParentSuffix,v.Local.sSQL)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				f.ODBC.Connection!Con.OpenLocalRecordSetRO("rstSeq",v.Local.sSQL)
				f.Intrinsic.Control.DoUntil(v.ODBC.Con!rstSeq.EOF,=,True)
					f.Intrinsic.String.Build("SEQ{0}*!*LMO{0}*!*WKG{0}*!*SEQ{0}_BC",V.Local.iSeq,v.Local.sName)
					f.Intrinsic.String.Split(v.Local.sName,"*!*",v.Local.sName)
					f.Data.DataTable.SetValue("GCGLabel",v.Local.iRow,v.Local.sName(0),v.ODBC.Con!rstSeq.FieldValTrim!SEQ,v.Local.sName(1),v.ODBC.Con!rstSeq.FieldValTrim!LMO,v.Local.sName(2),v.ODBC.Con!rstSeq.FieldValTrim!PART,v.Local.sName(3),v.ODBC.Con!rstSeq.FieldValTrim!SEQ_BC)
					f.Intrinsic.Math.Add(v.Local.iSeq,1,v.Local.iSeq)
					f.ODBC.Con!rstSeq.MoveNext
				f.Intrinsic.Control.Loop
				f.ODBC.Con!rstSeq.Close
	
				'printing the codesoft label
				'creating temp datatable that only has the fields I need for the label
	'			F.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '000' AND INSTANCE = '{1}'",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,v.Local.sHold,V.Local.sFilter)
				F.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{2}' AND INSTANCE = '{1}'",v.DataTable.[v.Local.sRet](0).[v.Local.sRet]!FieldValTrim,v.Local.sHold,V.Local.sParentSuffix,V.Local.sFilter)
				f.Intrinsic.Control.If(v.DataView.GCGLabel!LabelTemp.Exists)
					f.Data.DataView.Close("GCGLabel","LabelTemp")
				f.Intrinsic.Control.EndIf
				F.Data.DataView.Create("GCGLabel","LabelTemp",22,V.Local.sFilter,"Job")
				F.Data.DataView.ToDataTable("GCGLabel","LabelTemp","LabelTemp")
				F.Data.DataView.Close("GCGLabel","LabelTemp")
				F.Data.DataTable.RemoveColumn("LabelTemp","PARENT_JOB")
				F.Data.DataTable.RemoveColumn("LabelTemp","PARENT_Suffix")
				F.Data.DataTable.RemoveColumn("LabelTemp","Run_Qty")
				F.Data.DataTable.RemoveColumn("LabelTemp","Order_Line")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo")
				F.Data.DataTable.RemoveColumn("LabelTemp","Material")
				F.Data.DataTable.RemoveColumn("LabelTemp","Material_Desc")
				F.Data.DataTable.RemoveColumn("LabelTemp","Material_Qty")
				F.Data.DataTable.RemoveColumn("LabelTemp","Material_Um")
				F.Data.DataTable.RemoveColumn("LabelTemp","TotalLength")
				F.Data.DataTable.RemoveColumn("LabelTemp","TotalWidth")
				F.Data.DataTable.RemoveColumn("LabelTemp","Graindir")
				F.Data.DataTable.RemoveColumn("LabelTemp","Ebtopside")
				F.Data.DataTable.RemoveColumn("LabelTemp","Ebbottomside")
				F.Data.DataTable.RemoveColumn("LabelTemp","Ebleftside")
				F.Data.DataTable.RemoveColumn("LabelTemp","Ebrightside")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq1")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo1")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq2")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo2")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq3")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo3")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq4")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo4")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq5")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo5")
				F.Data.DataTable.RemoveColumn("LabelTemp","Wkg5")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq5_Bc")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq6")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo6")
				F.Data.DataTable.RemoveColumn("LabelTemp","Wkg6")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq6_Bc")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq7")
				F.Data.DataTable.RemoveColumn("LabelTemp","Lmo7")
				F.Data.DataTable.RemoveColumn("LabelTemp","Wkg7")
				F.Data.DataTable.RemoveColumn("LabelTemp","Seq7_Bc")
				F.Data.DataTable.RemoveColumn("LabelTemp","Image_Path")
				
				F.Intrinsic.Control.If(V.DataTable.LabelTemp.Exists,=,True)
					F.Global.BI.GetIDFromName("GCG_4442_Kitting_Labels.lab",V.Local.iRptID)
					F.Global.BI.GetRunID(V.Local.iBIRunID)
					F.Global.BI.StartLogging(V.Local.iBIRunID,V.Local.iRptID,0,"",V.Local.iLogID)
					F.Global.BI.StopLogging(V.Local.iLogID)
					V.Local.sPrinter.Set(V.Screen.Form!ddlLabelPrinter.Text)
					F.Global.BI.PrintCodesoftLabelFromDataTable(V.Local.iBIRunID,V.Local.iLogID,"LabelTemp",V.Local.sPrinter,True)
					F.Data.DataTable.Close("LabelTemp")
				F.Intrinsic.Control.EndIf
				
				'Save to DB
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				f.Data.DataTable.SaveToDB("GCGLabel","Con",V.Local.sPervasiveTable,"JOB*!*SUFFIX*!*INSTANCE",1)
				f.Data.DataTable.Close("GCGLabel")
				
				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
					F.ODBC.Connection!Con.Close
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.ElseIf(v.Local.iCount,=,2)
				'Cancel was pressed so exit sub
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
	
			
			F.Intrinsic.String.Build("GsGridControl{0}",v.Local.sRet,V.Local.sGrid)
			F.Intrinsic.String.Build("ProgressBar{0}",v.Local.sRet,V.Local.sProg)
			'We are not setting it to the bottom grid anymore. When it is pressed it is moving to a different Bin.
			'so for right now just delete the data.
			F.ODBC.Connection!Con.OpenCompanyConnection
			
			F.Intrinsic.String.Build("Update GCG_4442_WPROG_HIST Set Check_Out = now() Where GRID = '{0}' and Check_Out is null",V.Args.Column,V.Local.sSql)
			
			F.ODBC.Connection!Con.Execute(V.Local.sSql)
			
			F.Intrinsic.String.Build("Select * From GCG_4442_WOOD_KIT Where Rec_ID = '{0}'",V.Local.sRet,V.Local.sSql)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			f.ODBC.Connection!Con.OpenLocalRecordSetRW("rstKit",v.Local.sSql)
			f.Intrinsic.Control.If(v.ODBC.Con!rstKit.EOF,=,False)
				f.ODBC.Con!rstKit.Delete
				f.ODBC.Con!rstKit.Update
			f.Intrinsic.Control.EndIf
			f.ODBC.Con!rstKit.Close
			
			'adding bin to pervasive table rather than text file when the wktin user added 12/5/2018 RLK
			F.Intrinsic.Control.If(V.Caller.User.Trim,=,"WKTOUT")
				F.Intrinsic.String.Build("Select Bins From GCG_4442_Empty_Bins Where Bins = '{0}'",V.Local.sRet,V.Local.sSql)
				
				F.Data.DataTable.CreateFromSQL("Bin","Con",v.Local.sSql,True)
				F.Intrinsic.Control.If(V.DataTable.Bin.RowCount--,=,-1)
					F.Data.DataTable.AddRow("Bin","Bins",V.Local.sRet)
					'now delete DT
					F.Data.DataTable.SetValue(V.Local.sRet,0,V.Local.sRet,"")
					F.Data.DataTable.SetValue(V.Local.sRet,1,V.Local.sRet,"")
					F.Data.DataTable.SetValue(V.Local.sRet,2,V.Local.sRet,"")
					F.Data.DataTable.SetValue(V.Local.sRet,3,V.Local.sRet,"")
					F.Data.DataTable.SetValue(V.Local.sRet,4,V.Local.sRet,"")
					Gui.[v.Args.Screen].[V.Local.sGrid].HideRow(V.Local.sRet,5,True)
					'set progress bar back to 0
					Gui.[v.Args.Screen].[v.Local.sProg].Value(0)
				F.Intrinsic.Control.EndIf
				F.Data.DataTable.SaveToDB("Bin","con","GCG_4442_Empty_Bins","Bins",256,"Bins@!@Bins")
				F.Data.DataTable.Close("Bin")
			F.Intrinsic.Control.EndIf
			
			'Remove from Progress DT
			f.Intrinsic.String.Build("GRID = '{0}'",V.Local.sRet,V.Local.sSql)
			F.Intrinsic.Control.If(V.DataView.Progress!ProgressTemp.Exists)
				F.Data.DataView.Close("Progress","ProgressTemp")
			F.Intrinsic.Control.EndIf
			f.Data.DataView.Create("Progress","ProgressTemp",22,V.Local.sSql,"")
			f.Intrinsic.Control.For(v.Local.iCount,v.DataView.Progress!ProgressTemp.RowCount--,0,-1)
				f.Data.DataTable.DeleteRow("Progress",v.DataView.Progress!ProgressTemp(v.Local.iCount).DataTableIndex)
			f.Intrinsic.Control.Next(v.Local.iCount)
			f.Data.DataView.Close("Progress","ProgressTemp")
			
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			f.Data.DataTable.SaveToDB("Progress","Con","GCG_4442_WOOD_PROG","JOB*!*SUFFIX*!*GRID*!*PRIORITY",4)
			f.Data.DataTable.AcceptChanges("Progress")
			
			'manually deleting from tables,  Jobs still sometimes get left in the wood kit and wood progress table
			F.Intrinsic.String.Build("Delete From GCG_4442_Wood_Kit Where Rec_Id = '{0}'",V.Local.sGrid.Trim,V.Local.sSql)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!Con.Execute(V.Local.sSql)
			
			F.Intrinsic.String.Build("Delete From GCG_4442_WOOD_PROG Where Grid = '{0}'",V.Local.sGrid.Trim,V.Local.sSql)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!Con.Execute(V.Local.sSql)
			
			f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
				'Checks for lock file
				f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
'				f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
					f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
					f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
					f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
					f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\{1}_{2}.xml",v.Caller.FilesDir,v.Local.sRet,V.Caller.CompanyCode,v.Local.sXML2)
					f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'				f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
'					f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
'					f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
'					f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
'					f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\{1}_{2}.xml",v.Caller.FilesDir,v.Local.sRet,V.Caller.CompanyCode,v.Local.sXML2)
'					f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'				f.Intrinsic.Control.EndIf
		'		f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sSql)
		'		f.Intrinsic.File.Exists(v.Local.sSql,v.Local.bExist)
		'		f.Intrinsic.Control.DoUntil(v.Local.bExist,=,False,"OR",v.Local.iCount,=,60)
		'			f.Intrinsic.UI.ChangeWaitStatus("Lock File is active.",v.Local.iCount,0,60)
		'			'File exists so we need to wait before writing the info
		'			f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
		'			f.Intrinsic.UI.Sleep(1)
		'			f.Intrinsic.File.Exists(v.Local.sSql,v.Local.bExist)
		'		f.Intrinsic.Control.Loop
				f.Intrinsic.UI.CloseWaitDialog
				f.Intrinsic.Control.Try
				f.Intrinsic.File.String2File(v.Local.sFile,"")
				f.Intrinsic.Control.Catch
				f.Intrinsic.Control.EndTry
				'Create the XML for Progress
		'		f.Intrinsic.String.Build("{0}\4442\Wood\{1}Progress.xml",v.Caller.FilesDir,v.Caller.Terminal,v.Local.sXML)
				f.Data.DataTable.SaveToXML("Progress",0,False,v.Local.sXML)
		'		f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Changes.txt",v.Caller.FilesDir,v.Local.sSql)
				f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,"Progress",v.Local.sXML,v.Local.sXML)
				f.Intrinsic.File.Exists(v.Local.sSQL,v.Local.bExist)
				f.Intrinsic.Control.If(v.Local.bExist,=,True)
					f.Intrinsic.Control.Try
					f.Intrinsic.File.Append2FileNewLine(v.Local.sSql,v.Local.sXML)
					f.Intrinsic.Control.Catch
					f.Intrinsic.Control.EndTry
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.Try
					f.Intrinsic.File.String2File(v.Local.sSQL,v.Local.sXML)
					f.Intrinsic.Control.Catch
					f.Intrinsic.Control.EndTry
				f.Intrinsic.Control.EndIf
				
				
				'now delete DT
				F.Data.DataTable.SetValue(V.Local.sRet,0,V.Local.sRet,"")
				F.Data.DataTable.SetValue(V.Local.sRet,1,V.Local.sRet,"")
				F.Data.DataTable.SetValue(V.Local.sRet,2,V.Local.sRet,"")
				F.Data.DataTable.SetValue(V.Local.sRet,3,V.Local.sRet,"")
				F.Data.DataTable.SetValue(V.Local.sRet,4,V.Local.sRet,"")
				Gui.[v.Args.Screen].[V.Local.sGrid].HideRow(V.Local.sRet,5,True)
				'set progress bar back to 0
				Gui.[v.Args.Screen].[v.Local.sProg].Value(0)
				
		
				'Create XML for grid
		'		f.Intrinsic.String.Build("{0}\4442\Wood\{1}{2}.xml",v.Caller.FilesDir,v.Caller.Terminal,v.Local.sRet,v.Local.sXML)
				f.Data.DataTable.SaveToXML(v.Local.sRet,0,False,v.Local.sXML2)
		'		f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Changes.txt",v.Caller.FilesDir,v.Local.sSql)
				f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,v.Local.sRet,v.Local.sXML2,v.Local.sXML2)
				f.Intrinsic.Control.Try
				f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML2)
				f.Intrinsic.Control.Catch
				f.Intrinsic.Control.EndTry
				'delete the lock file
		'		f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sSql)
				f.Intrinsic.Control.Try
				f.Intrinsic.File.DeleteFile(v.Local.sFile)
				f.Intrinsic.Control.Catch
				f.Intrinsic.Control.EndTry
				
				Gui.F_WoodKit.GsgcView.MainView("Empty")
				
				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
					F.ODBC.Connection!Con.Close
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Else
			'Complete button wasn't pressed so populate the bottom grid.
			f.Intrinsic.Control.CallSub(Selection,"Grid",v.Args.Column)
		F.Intrinsic.Control.EndIf
		Gui.F_WoodKit.txtWO.SetFocus
		Gui.F_WoodKit.txtWO.SelectAll
	f.Intrinsic.Control.Else
	
		f.Intrinsic.Control.If(v.Caller.User.Trim,<>,"WKTIN","AND",v.Caller.User.Trim,<>,"WKTOUT")
'		f.Intrinsic.Control.If(v.Caller.User.Trim,<>,"WKTIN")
			'View user pressed the button, that's not okay with me.
			'DENIED!
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.If(v.DataTable.[v.Args.Column](0).[v.Args.Column]!FieldVal,<>,"")
			v.Local.X.Declare(Long)
			v.Local.Y.Declare(Long)
			v.Global.sGrid.Set(v.Args.Column)
			v.Global.sControl.Set(v.Args.ControlName)
			f.Intrinsic.API.GetMousePosition(v.Local.X,v.Local.Y)
			Gui.[v.Args.Screen]..ContextMenuShow("ctxOverride",v.Local.X,v.Local.Y)
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.GsGridControl_RowCellClick.End

Program.Sub.Resize.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.iFWidthDiff.Declare(Long)
	v.Local.iFHeightDiff.Declare(Long)
	v.Local.iWorkWidth.Declare(Long)
	v.Local.iWorkHeight.Declare(Long)
	v.Local.iCount.Declare(Long)
	v.Local.sControl.Declare(String)
	v.Local.sPrevControl.Declare(String)
	v.Local.sPControl.Declare(String)
	v.Local.sPrevPControl.Declare(String)
	v.Local.iStart.Declare(Long)
	v.Local.iEnd.Declare(Long)
	v.Local.sType.Declare(String)
	v.Local.sCount.Declare(String)
	v.Local.iC.Declare(Long)
	v.Local.sNum.Declare(String)
	v.Local.iPrev.Declare(Long)
	
	'get the difference from the new and current 
	f.Intrinsic.Control.If(v.Args.Screen,=,"F_WOODKIT")
		f.Intrinsic.Math.Sub(v.Screen.F_WoodKit.Width,v.Global.iWidth,v.Local.iFWidthDiff)
		f.Intrinsic.Math.Sub(v.Screen.F_WoodKit.Height,v.Global.iHeight,v.Local.iFHeightDiff)
		'set the global width and height to their current states for next time it is used.
		v.Global.iWidth.Set(v.Screen.F_WoodKit.Width)
		v.Global.iHeight.Set(v.Screen.F_WoodKit.Height)
		v.Local.iStart.Set(1)
		v.Local.iEnd.Set(12)
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Sub(v.Screen.Form.Width,v.Global.iFWidth,v.Local.iFWidthDiff)
		f.Intrinsic.Math.Sub(v.Screen.Form.Height,v.Global.iFHeight,v.Local.iFHeightDiff)
		'set the global width and height to their current states for next time it is used.
		v.Global.iFWidth.Set(v.Screen.Form.Width)
		v.Global.iFHeight.Set(v.Screen.Form.Height)
		v.Local.iStart.Set(13)
		v.Local.iEnd.Set(24)
	f.Intrinsic.Control.EndIf
	
	'we need to resize Grids and progress bars
	'divide the width by the amount in the row
	f.Intrinsic.Math.Div(v.Local.iFWidthDiff,12,v.Local.iFWidthDiff)
	'divide the height by the amount in the column
	f.Intrinsic.Math.Div(v.Local.iFHeightDiff,3,v.Local.iFHeightDiff)
	
	f.Intrinsic.String.Split("A*!*B*!*C","*!*",v.Local.sType)
	f.Intrinsic.String.Format(v.Local.iStart,"00",v.Local.sNum)
	'Loop through each of the letters
	f.Intrinsic.Control.For(v.Local.iC,0,v.Local.sType.UBound,1)
		v.Local.sPrevControl.Set("")
		v.Local.sPrevPControl.Set("")
		f.Intrinsic.Control.For(v.Local.iCount,v.Local.iStart,v.Local.iEnd,1)
			v.Local.sCount.Set(v.Local.iCount)
			f.Intrinsic.String.Format(v.Local.sCount.Long,"00",v.Local.sControl)
			f.Intrinsic.String.Build("{0}{1}",v.Local.sType(v.Local.iC),v.Local.sControl,v.Local.sControl)
			f.Intrinsic.String.Build("GsGridControl{0}",v.Local.sControl,v.Local.sControl)
			f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sControl].Width,v.Local.iFWidthDiff,v.Local.iWorkWidth)
		'	f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sControl].Height,v.Local.iFHeightDiff,v.Local.iWorkHeight)
			v.Local.iWorkHeight.Set(v.Screen.[v.Args.Screen]![v.Local.sControl].Height)
			Gui.[v.Args.Screen].[v.Local.sControl].Size(v.Local.iWorkWidth,v.Local.iWorkHeight)
	'		f.Intrinsic.Control.If(v.Local.iCount,>,1,"AND",v.Local.iCount,<,12)
			f.Intrinsic.Control.If(v.Local.sType(v.Local.iC),=,"A","AND",v.Local.iCount,<>,1,v.Local.iCount,<>,13)
				'we are on the top row so only change the x position
				f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sPrevControl].Left,v.Screen.[v.Args.Screen]![v.Local.sPrevControl].Width,v.Local.iWorkWidth)
				v.Local.iWorkHeight.Set(v.Screen.[v.Args.Screen]![v.Local.sControl].Top)	
				gui.[v.Args.Screen].[v.Local.sControl].Position(v.Local.iWorkWidth,v.Local.iWorkHeight)
			f.Intrinsic.Control.ElseIf(v.Local.iCount,<>,1,"AND",v.Local.iCount,<>,13)
				'we are on the other two rows so change both x and y position, but not for 11 and 21 because it is on the left.
				f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sPrevControl].Left,v.Screen.[v.Args.Screen]![v.Local.sPrevControl].Width,v.Local.iWorkWidth)
				v.Local.iWorkHeight.Set(v.Screen.[v.Args.Screen]![v.Local.sPrevControl].Top)
				gui.[v.Args.Screen].[v.Local.sControl].Position(v.Local.iWorkWidth,v.Local.iWorkHeight)
			f.Intrinsic.Control.EndIf
			
			f.Intrinsic.Control.If(v.Local.iCount,=,1,"AND",v.Local.sType(v.Local.iC),<>,"A")
				v.Local.iWorkWidth.Set(v.Screen.[v.Args.Screen]![v.Local.sControl].Left)
				f.Intrinsic.Math.Sub(v.Local.iC,1,v.Local.iPrev)
				f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]!GsGridControl[v.Local.sType(v.Local.iPrev)][v.Local.sNum].Top,v.Screen.[v.Args.Screen]!GsGridControl[v.Local.sType(v.Local.iPrev)][v.Local.sNum].Height,495,v.Local.iWorkHeight)
				gui.[v.Args.Screen].[v.Local.sControl].Position(v.Local.iWorkWidth,v.Local.iWorkHeight)
			f.Intrinsic.Control.ElseIf(v.Local.iCount,=,1,"AND",v.Local.sType(v.Local.iC),=,"A")
				'we are on the top row so only change the x position
	'			f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sPrevControl].Left,v.Screen.[v.Args.Screen]![v.Local.sPrevControl].Width,v.Local.iWorkWidth)
				v.Local.iWorkWidth.Set(v.Screen.[v.Args.Screen]![v.Local.sControl].Left)
				v.Local.iWorkHeight.Set(v.Screen.[v.Args.Screen]![v.Local.sControl].Top)	
				gui.[v.Args.Screen].[v.Local.sControl].Position(v.Local.iWorkWidth,v.Local.iWorkHeight)
			f.Intrinsic.Control.EndIf
			
			v.Local.sPrevControl.Set(v.Local.sControl)
			
			f.Intrinsic.String.Format(v.Local.sCount.Long,"00",v.Local.sPControl)
			f.Intrinsic.String.Build("{0}{1}",v.Local.sType(v.Local.iC),v.Local.sPControl,v.Local.sPControl)
			f.Intrinsic.String.Build("ProgressBar{0}",v.Local.sPControl,v.Local.sPControl)
			f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sPControl].Width,v.Local.iFWidthDiff,v.Local.iWorkWidth)
			v.Local.iWorkHeight.Set(v.Screen.[v.Args.Screen]![v.Local.sPControl].Height)
			gui.[v.Args.Screen].[v.Local.sPControl].Size(v.Local.iWorkWidth,v.Local.iWorkHeight)
	'		f.Intrinsic.Control.If(v.Local.iCount,<>,1,"AND",v.Local.iCount,<>,13,v.Local.iCount,<>,25)
			f.Intrinsic.Control.If(v.Local.iCount,<>,1,"AND",v.Local.iCount,<>,13)
				'we are on the other two rows so change both x and y position, but not for 13 and 25 because it is on the left.
				f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sPrevPControl].Left,v.Screen.[v.Args.Screen]![v.Local.sPrevPControl].Width,v.Local.iWorkWidth)
				f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sControl].Top,v.Screen.[v.Args.Screen]![v.Local.sControl].Height,45,v.Local.iWorkHeight)
				gui.[v.Args.Screen].[v.Local.sPControl].Position(v.Local.iWorkWidth,v.Local.iWorkHeight)
			f.Intrinsic.Control.Else
				v.Local.iWorkWidth.Set(v.Screen.[v.Args.Screen]![v.Local.sPControl].Left)
				f.Intrinsic.Math.Add(v.Screen.[v.Args.Screen]![v.Local.sControl].Top,v.Screen.[v.Args.Screen]![v.Local.sControl].Height,45,v.Local.iWorkHeight)
				gui.[v.Args.Screen].[v.Local.sPControl].Position(v.Local.iWorkWidth,v.Local.iWorkHeight)
			f.Intrinsic.Control.EndIf
			
			v.Local.sPrevPControl.Set(v.Local.sPControl)
		
		
		f.Intrinsic.Control.Next(v.Local.iCount)
	f.Intrinsic.Control.Next(v.Local.iC)

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.Resize.End

Program.Sub.UpdateExisting.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sSQL.Declare(String)
	v.Local.sCount.Declare(String)
	v.Local.iCompleted.Declare(Long)
	v.Local.sProg.Declare(String)
	v.Local.sGrid.Declare(String)
	v.Local.sForm.Declare(String)
	v.Local.sXML.Declare(String)
	v.Local.iCount.Declare(Long)
	v.Local.bExist.Declare(Boolean)
	v.Local.sFile.Declare(String)
	v.Local.sXML2.Declare(String)
	v.Local.iPriority.Declare(Long)
	v.Local.sQty.Declare(String)
	V.Local.sSuffix.Declare(String)
	V.Local.sPsuffix.Declare(String)
	V.Local.bGood.Declare(Boolean,False)
	
	'Set the form it is from
	f.Intrinsic.Control.If(v.Args.DT.Right2,<,13)
		v.Local.sForm.Set("F_WoodKit")
	f.Intrinsic.Control.Else
		v.Local.sForm.Set("Form")
	f.Intrinsic.Control.EndIf
	
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	
	'checking and seeing if the wo has only a suffix of '' or 000
	f.Intrinsic.String.Build("SELECT Job, Suffix from V_Job_Header Where Job = '{0}' Order by Suffix",V.Args.Job,V.Local.sSQL)
	f.Intrinsic.Control.If(V.DataTable.JobTemp.Exists,=,True)
		f.Data.DataTable.Close("JobTemp")
	f.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("JobTemp","con",v.Local.sSQL,True)
	
	F.Intrinsic.String.Build("Select PARENT_SUFFIX_PARENT From V_Job_Header Where Job = '{0}' and Suffix = '{1}'",V.Args.Job,v.Args.Suffix,V.Local.sSQL)
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sPsuffix)
	F.Intrinsic.String.Replace(V.Local.sPsuffix,"*!*","",V.Local.sPsuffix)
	F.Intrinsic.String.Replace(V.Local.sPsuffix,"#$#","",V.Local.sPsuffix)
				
	'Get Parent Qty to recalculate our total qty later
	f.Intrinsic.String.Build("SELECT QTY_ORDER, RTRIM(' ') FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}'",V.Args.Job,V.Local.sPsuffix,v.Local.sSQL)
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sQty)
	f.Intrinsic.String.Replace(v.Local.sQty,"*!*","",v.Local.sQty)
	f.Intrinsic.String.Replace(v.Local.sQty,"#$#","",v.Local.sQty)
	
	F.Intrinsic.String.Build("Select * From GCG_4442_WOOD_KIT Where Rec_ID = '{0}'",V.Args.DT,V.Local.sSQL)
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	F.ODBC.Connection!con.OpenLocalRecordsetRW("rstKit",V.Local.sSQL)
	f.Intrinsic.Control.If(v.ODBC.Con!rstKit.EOF,=,False)
	
		F.Intrinsic.String.Split(V.DataTable.[v.Args.DT](4).[v.Args.DT]!FieldValTrim,"OF",V.Local.sCount)
		v.Local.sCount.RedimPreserve(0,1)
	'	F.Intrinsic.Math.Add(V.Local.sCount(0).Long,1,V.Local.iCompleted)
		F.Intrinsic.Control.If(V.DataTable.JobTemp(V.DataTable.JobTemp.RowCount--).Suffix!FieldValTrim,=,"000","OR",V.DataTable.JobTemp(V.DataTable.JobTemp.RowCount--).Suffix!FieldValTrim,=,"")
			f.Intrinsic.String.Build("SELECT QTY_ORDER FROM V_JOB_HEADER WHERE JOB = '{0}' AND (SUFFIX = '000' or RTRIM(SUFFIX) = '')",v.Args.Job,v.Local.sQty.Long,v.Local.sSQL)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("SELECT SUFFIX From V_Job_Operations Where Part in ('*EW0','*EP0','*EA0') and Job = '{0}' and LMO = 'L' and Part <> ''",V.Args.Job,V.Local.sSQL)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSuffix)
			F.Intrinsic.String.Replace(V.Local.sSuffix,"*!*","",V.Local.sSuffix)
			F.Intrinsic.String.Replace(V.Local.sSuffix,"#$#","','",V.Local.sSuffix)
			F.Intrinsic.String.Build("'{0}'",V.Local.sSuffix,V.Local.sSuffix)
			
			F.Intrinsic.String.Build("SELECT SUFFIX, CAST(QTY_ORDER / {1} AS DOUBLE) AS QTY_ORDER FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX NOT IN({2}) AND SUFFIX <> '000' AND PARENT_SUFFIX_PARENT = '{3}'",v.Args.Job,v.Local.sQty.Long,V.Local.sSuffix,V.Local.sPsuffix,v.Local.sSQL)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.Data.Dictionary.CreateFromSQL("QtyUpdate","con",V.Local.sSQL)
			F.Data.Dictionary.SetDefaultReturn("QtyUpdate",0)
			f.Intrinsic.String.Build("GRID = '{0}'",v.Args.DT,v.Local.sSQL)
			f.Data.DataView.Create("Progress","ProgressTemp","22",v.Local.sSQL,"Suffix Asc")
			F.Data.DataView.ToDataTable("Progress","ProgressTemp","ProgressTemp")
			F.Data.DataTable.FillFromDictionary("ProgressTemp","QtyUpdate","Suffix","QTY_ORDER")
			F.Data.Dictionary.Close("QtyUpdate")
			F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.Progress!ProgressTemp.RowCount--,1)
				F.Data.DataView.SetValue("Progress","ProgressTemp",V.Local.iCount,"QTY_ORDER",V.DataTable.ProgressTemp(V.Local.iCount).Qty_Order!FieldVal)
			F.Intrinsic.Control.Next(V.Local.iCount)
	'		F.Data.DataTable.Merge("ProgressTemp","Progress",False,2)
			F.Data.DataView.Close("Progress","ProgressTemp")
			F.Data.DataTable.Close("ProgressTemp")
			
			f.Intrinsic.String.Build("SELECT SUM(QTY_ORDER / {1}) AS QTY_ORDER FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX NOT IN({2}) AND SUFFIX <> '000' AND PARENT_SUFFIX_PARENT = '{3}' ",v.Args.Job,v.Local.sQty.Long,V.Local.sSuffix,V.Local.sPsuffix,v.Local.sSQL)
		F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'			F.ODBC.Connection!Con.OpenCompanyConnection
'		F.Intrinsic.Control.EndIf
		f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sQty)
		f.Intrinsic.String.Replace(v.Local.sQty,"*!*","",v.Local.sQty)
		f.Intrinsic.String.Replace(v.Local.sQty,"#$#","",v.Local.sQty)
	
		F.Intrinsic.Control.DoEvents
		
		f.Intrinsic.String.Build("GRID = '{0}' AND JOB = '{1}' ",v.Args.DT,v.Args.Job,v.Local.sSQL)
		f.Data.DataView.Create("Progress","ProgressTemp","22",v.Local.sSQL,"")
		F.Data.DataView.ToDataTable("Progress","ProgressTemp","PTemp",True)
		F.Data.DataView.Close("Progress","ProgressTemp")
		F.Data.DataTable.AddExpressionColumn("PTemp","SumQtyCount","Float","Sum(Qty_Completed)")
		V.Local.iCompleted.Set(V.DataTable.PTemp(V.DataTable.PTemp.RowCount--).SumQtyCount!FieldValFloat)
		F.Data.DataTable.Close("PTemp")
		F.Intrinsic.Math.Add(V.Local.iCompleted,1,V.Local.iCompleted)
		F.Intrinsic.String.Build("{0} OF {1}",V.Local.iCompleted,v.Local.sQty.Long,V.Local.sCount)
		v.Local.sCount.RedimPreserve(0,0)
		F.Intrinsic.String.Build("ProgressBar{0}",V.Args.DT,V.Local.sProg)
		'Set progress Max to the possibly updated qty
		Gui.[v.Local.sForm].[v.Local.sProg].Max(v.Local.sQty.Long)
		f.Intrinsic.Control.If(v.Local.iCompleted,<=,v.Local.sQty.Long)
			gui.[v.Local.sForm].[v.Local.sProg].Value(v.Local.iCompleted)
			F.Data.DataTable.SetValue(v.Args.DT,4,v.Args.DT,V.Local.sCount)
			F.ODBC.con!rstKit.Set!Kitting_Status(V.Local.sCount)
			F.ODBC.Con!rstKit.Update
			f.Intrinsic.Control.If(v.Local.iCompleted,=,v.Local.sQty.Long)
				F.Intrinsic.String.Build("GsGridControl{0}",v.Args.DT,V.Local.sGrid)
				gui.[v.Local.sForm].[V.Local.sGrid].HideRow(v.Args.DT,5,False)
			f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			'added this in so completed qty cant go passed the order qty. 
			F.Intrinsic.String.Build("{0} OF {1}",v.Local.sQty.Long,v.Local.sQty.Long,V.Local.sCount)
			F.ODBC.con!rstKit.Set!Kitting_Status(V.Local.sCount)
			F.ODBC.Con!rstKit.Update
			F.Intrinsic.String.Build("GsGridControl{0}",v.Args.DT,V.Local.sGrid)
			gui.[v.Local.sForm].[V.Local.sGrid].HideRow(v.Args.DT,5,False)
		F.Intrinsic.Control.EndIf
		
		'Add one to the qty completed for progress dt
		f.Intrinsic.String.Build("GRID = '{0}' AND SUFFIX = '{1}' AND JOB = '{2}'",v.Args.DT,v.Args.Suffix,V.Args.Job,v.Local.sSQL)
		f.Data.DataView.Create("Progress","ProgressTemp","22",v.Local.sSQL,"")
		f.Intrinsic.Control.If(v.DataView.Progress!ProgressTemp.RowCount,>,0)
			V.Local.bGood.Set(True)
			f.Intrinsic.Math.Add(v.DataView.Progress!ProgressTemp(V.DataView.Progress!ProgressTemp.RowCount--).Qty_Completed!FieldVal,1,v.Local.iCompleted)
			f.Data.DataView.SetValue("Progress","ProgressTemp",-1,"QTY_COMPLETED",v.Local.iCompleted)
			v.Local.iPriority.Set(v.DataView.Progress!ProgressTemp(V.DataView.Progress!ProgressTemp.RowCount--).PRIORITY!FieldValLong)
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("Progress","ProgressTemp")
		
		f.Intrinsic.Control.If(v.Local.iPriority,>,0)
			F.Intrinsic.UI.ChangeWaitStatus("UpdateExisiting: Datatabe TempNewSuffix.........")
			F.Intrinsic.String.Build("SELECT SUFFIX From V_Job_Operations Where Part in ('*EW0','*EP0','*EA0') and Job = '{0}' and LMO = 'L' and Part <> ''",V.Args.Job,V.Local.sSQL)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSuffix)
			F.Intrinsic.String.Replace(V.Local.sSuffix,"*!*","",V.Local.sSuffix)
			F.Intrinsic.String.Replace(V.Local.sSuffix,"#$#","','",V.Local.sSuffix)
			F.Intrinsic.String.Build("'{0}'",V.Local.sSuffix,V.Local.sSuffix)
			'Lets check and see if we have any other Suffixes floating around that are not currently in the progress DT.
			f.Intrinsic.String.Build("SELECT A.JOB, A.SUFFIX, RTRIM(A.PART) AS PART,RTRIM(A.DESCRIPTION) AS DESCRIPTION, CAST(A.QTY_ORDER / (SELECT B.QTY_ORDER FROM V_JOB_HEADER AS B WHERE B.JOB = A.JOB AND B.SUFFIX = '{4}') AS DOUBLE) AS QTY_ORDER, CAST(0 AS DOUBLE) AS QTY_COMPLETED, '{1}' AS GRID, Cast({2} as Integer) AS PRIORITY FROM V_JOB_HEADER AS A WHERE A.SUFFIX NOT IN (SELECT C.SUFFIX FROM GCG_4442_WOOD_PROG AS C WHERE C.JOB = A.JOB AND C.GRID = '{1}') AND A.SUFFIX <> '000' AND A.JOB = '{0}' AND SUFFIX NOT IN({3}) AND PARENT_SUFFIX_PARENT = '{4}' ",v.Args.Job,v.Args.DT,v.Local.iPriority,V.Local.sSuffix,V.Local.sPsuffix,v.Local.sSQL)
			f.Data.DataTable.CreateFromSQL("TempNewSuffix","Con",v.Local.sSQL,True)
	
			f.Intrinsic.Control.If(v.DataTable.TempNewSuffix.RowCount,>,0)
				'We have rows so lets merge them into Progress table
				F.Intrinsic.UI.ChangeWaitStatus("UpdateExisiting: Datatabe TempNewSuffix Merge.........")
				f.Data.DataTable.Merge("TempNewSuffix","Progress",True,2)
			f.Intrinsic.Control.EndIf
		
			f.Data.DataTable.Close("TempNewSuffix")
	
		f.Intrinsic.Control.EndIf
		F.Intrinsic.UI.ChangeWaitStatus("UpdateExisiting: Datatabe save.........")
		
'		F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'			F.ODBC.Connection!Con.OpenCompanyConnection
'		F.Intrinsic.Control.EndIf
	
		f.Data.DataTable.SaveToDB("Progress","Con","GCG_4442_WOOD_PROG","JOB*!*SUFFIX*!*GRID*!*PRIORITY",3)
		f.Data.DataTable.AcceptChanges("Progress")
		
		F.ODBC.con!rstKit.Update
		
		'Checks for lock file
		f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
		f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\{1}_{2}.xml",v.Caller.FilesDir,v.Args.DT,V.Caller.CompanyCode,v.Local.sXML2)
			f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'		f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
'			f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
'			f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
'			f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
'			f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\{1}_{2}.xml",v.Caller.FilesDir,v.Args.DT,V.Caller.CompanyCode,v.Local.sXML2)
'			f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'		f.Intrinsic.Control.EndIf
			
	'	f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sSql)
	'	f.Intrinsic.File.Exists(v.Local.sSql,v.Local.bExist)
	'	f.Intrinsic.Control.DoUntil(v.Local.bExist,=,False,"OR",v.Local.iCount,=,60)
	'		f.Intrinsic.UI.ChangeWaitStatus("Lock File is active.",v.Local.iCount,0,60)
	'		'File exists so we need to wait before writing the info
	'		f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
	'		f.Intrinsic.UI.Sleep(1)
	'		f.Intrinsic.File.Exists(v.Local.sSql,v.Local.bExist)
	'	f.Intrinsic.Control.Loop
			f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.Try
			f.Intrinsic.File.String2File(v.Local.sFile,"")
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
			'Create the XML for Progress
		'	f.Intrinsic.String.Build("{0}\4442\Wood\{1}Progress.xml",v.Caller.FilesDir,v.Caller.Terminal,v.Local.sXML)
			f.Data.DataTable.SaveToXML("Progress",0,False,v.Local.sXML)
		'	f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Changes.txt",v.Caller.FilesDir,v.Local.sSql)
			f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,"Progress",v.Local.sXML,v.Local.sXML)
			f.Intrinsic.File.Exists(v.Local.sSQL,v.Local.bExist)
			f.Intrinsic.Control.If(v.Local.bExist,=,True)
				f.Intrinsic.Control.Try
				f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML)
				f.Intrinsic.Control.Catch
				f.Intrinsic.Control.EndTry
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.Try
				f.Intrinsic.File.String2File(v.Local.sSQL,v.Local.sXML)
				f.Intrinsic.Control.Catch
				f.Intrinsic.Control.EndTry
			f.Intrinsic.Control.EndIf
			'Create XML for grid
		'	f.Intrinsic.String.Build("{0}\4442\Wood\{1}{2}.xml",v.Caller.FilesDir,v.Caller.Terminal,v.Args.DT,v.Local.sXML)
			f.Data.DataTable.SaveToXML(v.Args.DT,0,False,v.Local.sXML2)
		'	f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Changes.txt",v.Caller.FilesDir,v.Local.sSql)
			f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,v.Args.DT,v.Local.sXML2,v.Local.sXML2)
			f.Intrinsic.Control.Try
			f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML2)
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
			
			'Delete the lock file
		'	f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sSql)
			f.Intrinsic.Control.Try
			f.Intrinsic.File.DeleteFile(v.Local.sFile)
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
			
			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
				F.ODBC.con!rstKit.Close
				F.ODBC.Connection!Con.Close
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.CallSub(Selection,"Grid",v.Args.DT)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
		F.ODBC.con!rstKit.Close
		F.ODBC.Connection!Con.Close
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.bGood)
		F.Intrinsic.UI.PlaySound(V.Global.sGoodScan)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.PlaySound(V.Global.sBadScan)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.UpdateExisting.End

Program.Sub.NewJob.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sSQL.Declare(String)
	v.Local.iCount.Declare(Long)
	v.Local.sDataTable.Declare(String)
	v.Local.sProg.Declare(String)
	v.Local.iCompleted.Declare(Long)
	v.Local.sGrid.Declare(String)
	v.Local.sCount.Declare(String)
	v.Local.iStart.Declare(Long)
	v.Local.iEnd.Declare(Long)
	v.Local.iC.Declare(Long)
	v.Local.sForm.Declare(String)
	v.Local.sType.Declare(String)
	v.Local.sQty.Declare(String)
	v.Local.sPJob.Declare(String)
	v.Local.sPSuffix.Declare(String)
	v.Local.sXML.Declare(String)
	v.Local.iLoop.Declare(Long)
	v.Local.bExist.Declare(Boolean)
	v.Local.sFile.Declare(String)
	v.Local.sXML2.Declare(String)
	V.Local.sQuantity.Declare(String)
	V.Local.bGood.Declare(Boolean,False)
	V.Local.sFilter.Declare(String,"")
	V.Local.iRemove.Declare(Long,0)
	V.Local.sRet.Declare(String,"")
	
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	
	'Get the Parent job and Suffix
	f.Intrinsic.String.Build("SELECT ISNULL(PARENT_WO,'{0}') AS PARENT_WO, ISNULL(PARENT_SUFFIX_PARENT,'000') AS PARENT_SUFFIX_PARENT FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}' ",v.Args.Job,v.Args.Suffix,v.Local.sSQL)
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.ODBC.Connection!Con.OpenLocalRecordsetRO("rstParent",v.Local.sSQL)
	f.Intrinsic.Control.If(v.ODBC.Con!rstParent.EOF,=,False)
		v.Local.sPJob.Set(v.ODBC.Con!rstParent.FieldValTrim!PARENT_WO)
		v.Local.sPSuffix.Set(v.ODBC.Con!rstParent.FieldValTrim!PARENT_SUFFIX_PARENT)
	f.Intrinsic.Control.EndIf
	f.ODBC.Con!rstParent.Close
	
	f.Intrinsic.String.Build("SELECT QTY_ORDER, RTRIM(' ') FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}'",V.Args.Job,V.Local.sPSuffix,v.Local.sSQL)
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sQty)
	f.Intrinsic.String.Replace(v.Local.sQty,"*!*","",v.Local.sQty)
	f.Intrinsic.String.Replace(v.Local.sQty,"#$#","",v.Local.sQty)
	
	'checking and seeing if the wo has only a suffix of '' or 000
	f.Intrinsic.String.Build("SELECT Job, Suffix from V_Job_Header Where Job = '{0}' Order by Suffix",V.Args.Job,V.Local.sSQL)
	f.Intrinsic.Control.If(V.DataTable.JobTemp.Exists,=,True)
		f.Data.DataTable.Close("JobTemp")
	f.Intrinsic.Control.EndIf
	
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("JobTemp","con",v.Local.sSQL,True)
	
	'F.Intrinsic.Control.If(V.DataTable.JobTemp.ActiveRowCount--,<>,-1)
	F.Intrinsic.Control.If(V.DataTable.JobTemp.RowCount--,<>,-1)
		F.Intrinsic.Control.If(V.DataTable.JobTemp(V.DataTable.JobTemp.RowCount--).Suffix!FieldValTrim,=,"000","OR",V.DataTable.JobTemp(V.DataTable.JobTemp.RowCount--).Suffix!FieldValTrim,=,"")
			f.Intrinsic.String.Build("SELECT (SELECT RTRIM(PART) AS PART FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS PART, (SELECT QTY_ORDER AS QTY_ORDER FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS QTY_ORDER, (SELECT TOP 1 PART FROM V_JOB_OPERATIONS WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000') AND LMO = 'L' GROUP BY SEQ, PART) AS WC, (SELECT RTRIM(SALES_ORDER) AS ORDER_NO FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS ORDER_NO  FROM V_JOB_HEADER AS A WHERE JOB = '{0}' AND SUFFIX = '{1}' ",v.Args.Job,v.Args.Suffix,v.Local.sQty.Long,v.Local.sSQL)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("SELECT SUFFIX From V_Job_Operations Where Part in ('*EW0','*EP0','*EA0') and Job = '{0}' and LMO = 'L' and Part <> ''",V.Args.Job,V.Local.sSQL)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
			F.Intrinsic.String.Replace(V.Local.sSQL,"*!*","",V.Local.sSQL)
			F.Intrinsic.String.Replace(V.Local.sSQL,"#$#","','",V.Local.sSQL)
			F.Intrinsic.String.Build("'{0}'",V.Local.sSQL,V.Local.sSQL)
			
	'		f.Intrinsic.String.Build("SELECT (SELECT RTRIM(PART) AS PART FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS PART, (SELECT SUM(QTY_ORDER / {2}) AS QTY_ORDER FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX <> ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS QTY_ORDER, (SELECT TOP 1 PART FROM V_JOB_OPERATIONS WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000') AND LMO = 'L' GROUP BY SEQ, PART) AS WC, (SELECT RTRIM(SALES_ORDER) AS ORDER_NO FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS ORDER_NO  FROM V_JOB_HEADER AS A WHERE JOB = '{0}' AND SUFFIX = '{1}' ",v.Args.Job,v.Args.Suffix,v.Local.sQty.Long,v.Local.sSQL)
			f.Intrinsic.String.Build("SELECT (SELECT RTRIM(PART) AS PART FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS PART, (SELECT SUM(QTY_ORDER / {2}) AS QTY_ORDER FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND PARENT_SUFFIX_PARENT = '{4}' AND SUFFIX NOT IN({3}) AND SUFFIX <> '000') AS QTY_ORDER, (SELECT TOP 1 PART FROM V_JOB_OPERATIONS WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000') AND LMO = 'L' GROUP BY SEQ, PART) AS WC, (SELECT RTRIM(SALES_ORDER) AS ORDER_NO FROM V_JOB_HEADER WHERE JOB = IF(ISNULL(A.PARENT_WO,'{0}') = '','{0}',ISNULL(A.PARENT_WO,'{0}')) AND SUFFIX = ISNULL(A.PARENT_SUFFIX_PARENT,'000')) AS ORDER_NO  FROM V_JOB_HEADER AS A WHERE JOB = '{0}' AND SUFFIX = '{1}' ",v.Args.Job,v.Args.Suffix,v.Local.sQty.Long,V.Local.sSQL,V.Local.sPSuffix,v.Local.sSQL)
		F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'			F.ODBC.Connection!Con.OpenCompanyConnection
'		F.Intrinsic.Control.EndIf
		F.ODBC.Connection!con.OpenLocalRecordsetRW("rst",V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,False)
			'Check to see if the first labor sequence of the parent is *CC0 or CC01.
			f.Intrinsic.Control.If(v.ODBC.Con!rst.FieldValTrim!WC,=,"*CC0","OR",v.ODBC.Con!rst.FieldValTrim!WC,=,"CC01")
				v.Local.iEnd.Set(24)
				f.Intrinsic.String.Split("A*!*B","*!*",v.Local.sType)
			f.Intrinsic.Control.Else
				v.Local.iEnd.Set(24)
				f.Intrinsic.String.Split("C","*!*",v.Local.sType)
			f.Intrinsic.Control.EndIf
			'loop through each type
			f.Intrinsic.Control.For(v.Local.iC,0,v.Local.sType.UBound,1)
				'loop through each grid to see if we have a free spot
				'we are priorising A over B
				F.Intrinsic.Control.For(V.Local.iCount,1,v.Local.iEnd,1)
'					F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'						F.ODBC.Connection!Con.OpenCompanyConnection
'					F.Intrinsic.Control.EndIf
					'Build the Grid name
					f.Intrinsic.String.Format(v.Local.iCount,"00",v.Local.sDataTable)
					f.Intrinsic.String.Build("{0}{1}",v.Local.sType(v.Local.iC),v.Local.sDataTable,v.Local.sDataTable)
					'Not in use so we can use it
					'Make sure there is no value in it, there shouldn't because it is not in the dictionary
					F.Intrinsic.Control.If(V.DataTable.[V.Local.sDatatable](0).[V.Local.sDatatable]!FieldValTrim,=,"")
						F.Intrinsic.String.Build("Select * From GCG_4442_WOOD_KIT Where Rec_ID = '{0}'",V.Local.sDatatable,V.Local.sSQL)
'						F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'							F.ODBC.Connection!Con.OpenCompanyConnection
'						F.Intrinsic.Control.EndIf
						F.ODBC.Connection!con.OpenLocalRecordsetRW("rstKit",V.Local.sSQL)
						F.ODBC.con!rstKit.AddNew
						F.ODBC.con!rstKit.Set!REC_ID(V.Local.sDatatable)
						V.Local.bGood.Set(True)
						'Setting Row 0 as Job
						F.Data.DataTable.SetValue(V.Local.sDatatable,0,V.Local.sDatatable,V.Screen.F_WoodKit!txtWO.Text)
						F.ODBC.con!rstKit.Set!Job(V.Screen.F_WoodKit!txtWO.Text)
						'Setting row 1 as Sales Order
						F.Data.DataTable.SetValue(V.Local.sDatatable,1,V.Local.sDatatable,V.ODBC.con!rst.FieldValTrim!ORDER_NO)
						F.ODBC.con!rstKit.Set!ORDER_NO(V.ODBC.con!rst.FieldValTrim!ORDER_NO)
						'Setting row 2 as Parent Part
						F.Data.DataTable.SetValue(V.Local.sDatatable,2,V.Local.sDatatable,V.ODBC.con!rst.FieldValTrim!Part)
						F.ODBC.con!rstKit.Set!Part(V.ODBC.con!rst.FieldValTrim!Part)
						'Set Kit Status as Row 3
						F.Data.DataTable.SetValue(V.Local.sDatatable,3,V.Local.sDatatable,"KIT STATUS")
						'Set Row 4 as x of x if it is not more than the max
		'					F.Intrinsic.Math.Add(V.ODBC.con!rst.FieldValLong!Qty_Completed,1,V.Local.iCompleted)
						v.Local.iCompleted.Set(1)
						V.Local.sQuantity.Set(V.ODBC.con!rst.FieldValLong!Qty_Order)
	
						F.Intrinsic.String.Build("{0} OF {1}",V.Local.iCompleted,V.Local.sQuantity,V.Local.sCount)
						F.Intrinsic.String.Build("ProgressBar{0}",v.Local.sDataTable,V.Local.sProg)
						'Set the form name based on the type we are using
						f.Intrinsic.Control.If(v.Local.iCount,<,13)
							v.Local.sForm.Set("F_WoodKit")
						f.Intrinsic.Control.Else
							v.Local.sForm.Set("Form")
						f.Intrinsic.Control.EndIf
						
						'if our new count is less than or equal to our max then set it and update the progress bar
						f.Intrinsic.Control.If(v.Local.iCompleted,<=,V.Local.sQuantity.Long)
							Gui.[v.Local.sForm].[v.Local.sProg].Value(v.Local.iCompleted)
							F.Data.DataTable.SetValue(V.Local.sDatatable,4,V.Local.sDatatable,V.Local.sCount)
							F.ODBC.con!rstKit.Set!Kitting_Status(V.Local.sCount)
							'if x of x is max then unhide the ready button on row 4
							F.Intrinsic.Control.If(V.Local.iCompleted,=,V.ODBC.con!rst.FieldValLong!Qty_Order)
								F.Intrinsic.String.Build("GsGridControl{0}",V.Local.sDataTable,V.Local.sGrid)
								'Set the button to the next labor step
								f.Intrinsic.String.Build("SELECT TOP 1 RTRIM(PART) AS PART FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND LMO = 'L' AND SEQ < '995000' AND DATE_COMPLETED = '1900-01-01' ORDER BY SEQ ASC",v.Local.sPJob,v.Local.sPSuffix,v.Local.sSql)
'								F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'									F.ODBC.Connection!Con.OpenCompanyConnection
'								F.Intrinsic.Control.EndIf
								f.ODBC.Connection!Con.OpenLocalRecordsetRO("rstWC",v.Local.sSql)
								f.Intrinsic.Control.If(v.ODBC.Con!rstWC.EOF,=,False)
									f.Intrinsic.String.Build("Kit Complete{0}{1} Next",v.Ambient.NewLine,v.ODBC.Con!rstWC.FieldValTrim!PART,v.Local.sSql)
								f.Intrinsic.Control.Else
								f.Intrinsic.String.Build("Kit Complete{0}Assemble{0}Next",v.Ambient.NewLine,v.Local.sSql)
								f.Intrinsic.Control.EndIf
								f.ODBC.Con!rstWC.Close
								f.Data.DataTable.SetValue(v.Local.sDataTable,5,v.Local.sDataTable,v.Local.sSQL)
								Gui.[v.Local.sForm].[V.Local.sGrid].HideRow(V.Local.sDatatable,5,False)
							f.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else
							F.Intrinsic.UI.PlaySound(V.Global.sBadScan)
						F.Intrinsic.Control.EndIf
						'Set the progress bars max value
						F.Intrinsic.String.Build("ProgressBar{0}",V.Local.sDataTable,V.Local.sProg)
						f.Intrinsic.Control.If(v.ODBC.Con!rst.FieldValLong!QTY_ORDER,>,0)
							Gui.[v.Local.sForm].[v.Local.sProg].Max(V.ODBC.con!rst.FieldValLong!Qty_Order)
						f.Intrinsic.Control.EndIf
						
						F.ODBC.Con!rstKit.Update
						F.ODBC.con!rstKit.Close
						
						'We need to add the info to our Progress DT
						f.Intrinsic.Control.If(V.DataTable.JobTemp(v.DataTable.JobTemp.RowCount--).Suffix!FieldValTrim,=,"000",OR,V.DataTable.JobTemp(V.DataTable.JobTemp.RowCount--).Suffix!FieldValTrim,=,"")
							f.Intrinsic.String.Build("SELECT JOB, SUFFIX, RTRIM(PART) AS PART,RTRIM(DESCRIPTION) AS DESCRIPTION, QTY_ORDER, CAST(0 AS DOUBLE) AS QTY_COMPLETED, '{2}' AS GRID FROM V_JOB_HEADER WHERE (SUFFIX = '000' OR RTRIM(SUFFIX) = '') AND JOB = '{0}'",v.Args.Job,v.Local.sQty.Long,v.Local.sDataTable,v.Local.sSQL)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("SELECT SUFFIX From V_Job_Operations Where Part in ('*EW0','*EP0','*EA0') and Job = '{0}' and LMO = 'L' and Part <> ''",V.Args.Job,V.Local.sSQL)
'							F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'								F.ODBC.Connection!Con.OpenCompanyConnection
'							F.Intrinsic.Control.EndIf
							F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
							F.Intrinsic.String.Replace(V.Local.sSQL,"*!*","",V.Local.sSQL)
							F.Intrinsic.String.Replace(V.Local.sSQL,"#$#","','",V.Local.sSQL)
							F.Intrinsic.String.Build("'{0}'",V.Local.sSQL,V.Local.sSQL)
	'						f.Intrinsic.String.Build("SELECT JOB, SUFFIX, RTRIM(PART) AS PART,RTRIM(DESCRIPTION) AS DESCRIPTION, CAST(QTY_ORDER / {1} AS DOUBLE) AS QTY_ORDER, CAST(0 AS DOUBLE) AS QTY_COMPLETED, '{2}' AS GRID FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX NOT IN({3}) AND SUFFIX > '000'",v.Args.Job,v.Local.sQty.Long,v.Local.sDataTable,V.Local.sSQL,v.Local.sSQL)
							f.Intrinsic.String.Build("SELECT JOB, SUFFIX, RTRIM(PART) AS PART,RTRIM(DESCRIPTION) AS DESCRIPTION, CAST(QTY_ORDER / {1} AS DOUBLE) AS QTY_ORDER, CAST(0 AS DOUBLE) AS QTY_COMPLETED, '{2}' AS GRID FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX NOT IN({3}) AND PARENT_SUFFIX_PARENT = '{4}' AND SUFFIX <> '000'",v.Args.Job,v.Local.sQty.Long,v.Local.sDataTable,V.Local.sSQL,V.Local.sPSuffix,v.Local.sSQL)
						F.Intrinsic.Control.EndIf
'						F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'							F.ODBC.Connection!Con.OpenCompanyConnection
'						F.Intrinsic.Control.EndIf
						f.Data.DataTable.CreateFromSQL("ProgressTemp","Con",v.Local.sSQL)
						V.Local.sRet.RedimPreserve(0,1)
						F.Intrinsic.Control.If(V.DataTable.ProgressTemp.RowCount--,<>,-1)
							V.Local.sRet(0).Set(V.DataTable.ProgressTemp(V.DataTable.ProgressTemp.RowCount--).Part!FieldValTrim)
							V.Local.sRet(1).Set(V.DataTable.ProgressTemp(V.DataTable.ProgressTemp.RowCount--).Qty_Order!FieldVal)
						F.Intrinsic.Control.EndIf
						'Now that we have the fields we need to add in the Priority column
						f.Data.DataTable.AddColumn("ProgressTemp","PRIORITY","String")
						'We need to get the Highest Priority Number that exists in our Progress table.
						f.Intrinsic.String.Build("JOB = '{0}'",v.Args.Job,v.Local.sSQL)
						f.Data.DataTable.Compute("Progress","MAX(PRIORITY)",v.Local.sSQL,v.Local.iCompleted)
						f.Intrinsic.Math.Add(v.Local.iCompleted,1,v.Local.iCompleted)
						f.Data.DataTable.SetValue("ProgressTemp",-1,"PRIORITY",v.Local.iCompleted)
						'Add one to the suffix that we scanned
						f.Intrinsic.String.Build("SUFFIX = '{0}'",v.Args.Suffix,v.Local.sSQL)
						f.Data.DataView.Create("ProgressTemp","ProgressTemp",22,v.Local.sSQL,"")
						f.Data.DataView.SetValue("ProgressTemp","ProgressTemp",-1,"QTY_COMPLETED",1)
						f.Data.DataView.Close("ProgressTemp","ProgressTemp")
						'now we have everythign so we can just merge it to our progress dt
						f.Data.DataTable.Merge("ProgressTemp","Progress",True,2)
						f.Data.DataTable.Close("ProgressTemp")
						'Save the new info to the table
'						F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'							F.ODBC.Connection!Con.OpenCompanyConnection
'						F.Intrinsic.Control.EndIf
						f.Data.DataTable.SaveToDB("Progress","Con","GCG_4442_WOOD_PROG","JOB*!*SUFFIX*!*GRID*!*PRIORITY",7)
						f.Data.DataTable.AcceptChanges("Progress")
						
						F.Intrinsic.String.Build("Insert Into GCG_4442_WPROG_HIST (HIST_NO,GRID,JOB,SUFFIX,PART,QTY,CHECK_IN) Values(0,'{0}','{1}','{2}','{3}','{4}',{5})",V.Local.sDataTable,v.Args.Job,V.Local.sPSuffix,V.Local.sRet(0).Trim,V.Local.sRet(1).Float,"now()",V.Local.sSQL)
						F.ODBC.Connection!Con.Execute(V.Local.sSQL)
						
						'Checks for lock file
						f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
						f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
							f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
							f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
							f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
							f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\{1}_{2}.xml",v.Caller.FilesDir,v.Local.sDataTable,V.Caller.CompanyCode,v.Local.sXML2)
							f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'						f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
'							f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
'							f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
'							f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
'							f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\{1}_{2}.xml",v.Caller.FilesDir,v.Local.sDataTable,V.Caller.CompanyCode,v.Local.sXML2)
'							f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
						f.Intrinsic.Control.EndIf
		'				f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sSql)
		'				f.Intrinsic.File.Exists(v.Local.sSql,v.Local.bExist)
		'				f.Intrinsic.Control.DoUntil(v.Local.bExist,=,False,"OR",v.Local.iLoop,=,60)
		'					f.Intrinsic.UI.ChangeWaitStatus("Lock File is active.",v.Local.iLoop,0,60)
		'					'File exists so we need to wait before writing the info
		'					f.Intrinsic.Math.Add(v.Local.iLoop,1,v.Local.iLoop)
		'					f.Intrinsic.UI.Sleep(1)
		'					f.Intrinsic.File.Exists(v.Local.sSql,v.Local.bExist)
		'				f.Intrinsic.Control.Loop
						f.Intrinsic.UI.CloseWaitDialog
						f.Intrinsic.Control.Try
						f.Intrinsic.File.String2File(v.Local.sFile,"")
						f.Intrinsic.Control.Catch
						f.Intrinsic.Control.EndTry
			
						'Create the XML for Progress
		'				f.Intrinsic.String.Build("{0}\4442\Wood\{1}Progress.xml",v.Caller.FilesDir,v.Caller.Terminal,v.Local.sXML)
						f.Data.DataTable.SaveToXML("Progress",0,False,v.Local.sXML)
		'				f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Changes.txt",v.Caller.FilesDir,v.Local.sSql)
						f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,"Progress",v.Local.sXML,v.Local.sXML)
						f.Intrinsic.File.Exists(v.Local.sSQL,v.Local.bExist)
						f.Intrinsic.Control.If(v.Local.bExist,=,True)
							f.Intrinsic.Control.Try
							f.Intrinsic.File.Append2FileNewLine(v.Local.sSql,v.Local.sXML)
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
						f.Intrinsic.Control.Else
							f.Intrinsic.Control.Try
							f.Intrinsic.File.String2File(v.Local.sSQL,v.Local.sXML)
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
						f.Intrinsic.Control.EndIf
						'Create XML for grid
		'				f.Intrinsic.String.Build("{0}\4442\Wood\{1}{2}.xml",v.Caller.FilesDir,v.Caller.Terminal,v.Local.sDataTable,v.Local.sXML)
						f.Data.DataTable.SaveToXML(v.Local.sDataTable,0,False,v.Local.sXML2)
		'				f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Changes.txt",v.Caller.FilesDir,v.Local.sSql)
						f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,v.Local.sDataTable,v.Local.sXML2,v.Local.sXML2)
						f.Intrinsic.Control.Try
						f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML2)
						f.Intrinsic.Control.Catch
						f.Intrinsic.Control.EndTry
						
						'Delete the lock file
		'				f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sSql)
						f.Intrinsic.Control.Try
						f.Intrinsic.File.DeleteFile(v.Local.sFile)
						f.Intrinsic.Control.Catch
						f.Intrinsic.Control.EndTry
						
						F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
							F.ODBC.Connection!Con.Close
						F.Intrinsic.Control.EndIf
	
						f.Intrinsic.Control.CallSub(Selection,"Grid",v.Local.sDataTable)
						F.Intrinsic.Control.ExitFor(V.Local.iC)	
					f.Intrinsic.Control.Else
						'Check and see if this is 20 or 30.
						f.Intrinsic.Control.If(v.Local.iCount,=,v.Local.iEnd,"AND",v.Local.iC,=,v.Local.sType.UBound)
							'We don't have any room so we can't add it.
							f.Intrinsic.UI.Msgbox("Job was NOT added because we don't have any more bins left.","Warning")
						f.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iCount)
			f.Intrinsic.Control.Next(v.Local.iC)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
		F.ODBC.Connection!Con.Close
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.bGood)
		F.Intrinsic.UI.PlaySound(V.Global.sGoodScan)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.PlaySound(V.Global.sBadScan)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.NewJob.End

Program.Sub.Selection.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sHold.Declare(String)
	v.Local.sGrid.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.sSQL.Declare(String)
	v.Local.sForm.Declare(String)
	v.Local.iCount.Declare(Long)
	v.Local.sFilter.Declare(String)
	v.Local.sRework.Declare(String)
	V.Local.sJob.Declare(String)
	
	v.Local.sRet.Set(v.Args.Grid)
	
	F.Intrinsic.Control.BlockEvents
	Gui.F_WoodKit.txtWO.Enabled(False)
	
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Global.sPrev,<>,"")
		'Check the grid to see which form it is
		f.Intrinsic.Control.If(v.Global.sPrev.Right2,<,13)
			v.Local.sForm.Set("F_WoodKit")
		f.Intrinsic.Control.Else
			v.Local.sForm.Set("Form")
		f.Intrinsic.Control.EndIf
		F.Intrinsic.String.Build("GsGridControl{0}",v.Global.sPrev,V.Local.sGrid)
		Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"cellbackcolor","White")
		Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"headerbackcolor","#0000ff")
	'	Gui.[v.Local.sForm].[V.Local.sGrid].SetCellAppearance(V.Global.sPrev,0,2,"backcolor","White")
	f.Intrinsic.Control.EndIf
	v.Global.sPrev.Set(v.Local.sRet)
	v.Global.iFlash.Set(1)
	'Check the grid to see which form it is
	f.Intrinsic.Control.If(v.Local.sRet.Right2,<,13)
		v.Local.sForm.Set("F_WoodKit")
	f.Intrinsic.Control.Else
		v.Local.sForm.Set("Form")
	f.Intrinsic.Control.EndIf
	
	'Now set our column to yellow
	F.Intrinsic.String.Build("GsGridControl{0}",v.Local.sRet,V.Local.sGrid)
	Gui.[v.Local.sForm].[v.Local.sGrid.Trim].SetColumnProperty(v.Local.sRet,v.Local.sRet,"cellbackcolor","Yellow")
	Gui.[v.Local.sForm].[v.Local.sGrid.Trim].SetColumnProperty(v.Local.sRet,v.Local.sRet,"headerbackcolor","#0000ff")
	
	Gui.F_WoodKit.GsgcView.SuspendLayout()
	
	f.Intrinsic.Control.If(v.DataTable.ComponentPartsParent.Exists,=,True)
		f.Intrinsic.Control.If(v.DataTable.ComponentPartsParent$Parts.Exists,=,True)
			f.Data.DataTable.Close("ComponentPartsParent$Parts")
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.Close("ComponentPartsParent")
	f.Intrinsic.Control.EndIf
	'Add the bottom Component grid
	'f.Intrinsic.String.Build("SELECT Job, Suffix, RTRIM(PART) AS Part, RTRIM(DESCRIPTION) AS Description, QTY_ORDER, QTY_COMPLETED FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX > '000' ORDER BY SUFFIX ASC",v.DataTable.[v.Args.Grid](0).[v.Args.Grid]!FieldVal,v.Local.sSQL)
	'f.Data.DataTable.CreateFromSQL("ComponentPartsParent","Con",v.Local.sSQL,True)
	'f.Data.DataTable.DeleteRow("ComponentPartsParent")
	f.Intrinsic.String.Build("GRID = '{0}' and JOB = '{1}'",V.Args.GRID,v.DataTable.[v.Args.Grid](0).[v.Args.Grid]!FieldVal,V.Local.sSQL)
	F.Intrinsic.Control.If(V.DataView.Progress!MergeTemp.Exists,=,True)
		F.Data.DataView.Close("Progress","MergeTemp")
	F.Intrinsic.Control.EndIf
	f.Data.DataView.Create("Progress","MergeTemp",22,v.Local.sSQL,"SUFFIX ASC")
	F.Intrinsic.Control.If(V.DataTable.ComponentPartsParent.Exists,=,True)
		F.Data.DataTable.Close("ComponentPartsParent")
	F.Intrinsic.Control.EndIf
	
	f.Data.DataView.ToDataTable("Progress","MergeTemp","ComponentPartsParent",True)
	'f.Data.DataView.Close("Progress","MergeTemp")
	f.Data.DataTable.AddColumn("ComponentPartsParent","Outside","String")
	f.Data.DataTable.AddColumn("ComponentPartsParent","Metal","String")
	f.Data.DataTable.AddColumn("ComponentPartsParent","Rework","String")
	'f.Data.DataTable.RemoveColumn("ComponentPartsParent","GRID")
	'f.Data.DataTable.RemoveColumn("ComponentPartsParent","PRIORITY")
	f.Intrinsic.Control.If(v.DataTable.ComponentPartsParent.RowCount,>,0)
		F.Intrinsic.Control.If(V.DataView.ComponentPartsParent!ComponentParentView.Exists)
			F.Data.DataView.Close("ComponentPartsParent","ComponentParentView")
		F.Intrinsic.Control.EndIf
		f.Data.DataView.Create("ComponentPartsParent","ComponentParentView")
		'Add all the children
	'	F.Intrinsic.String.Build("SELECT Job, Suffix, Seq, RTRIM(PART) AS Part, RTRIM(DESCRIPTION) AS Description, HOURS_ESTIMATED, HOURS_ACTUAL, LMO, RTRIM(OPERATION) AS OPERATION FROM V_JOB_OPERATIONS WHERE (LMO = 'L' OR LMO = 'O')  AND SEQ < '995000' AND JOB = '{0}' AND SUFFIX > '000'  ORDER BY JOB, SEQ ASC ",v.DataTable.[v.Args.Grid](0).[v.Args.Grid]!FieldVal,v.Local.sSQL)
		'checking to see if the job only has a 000 or blank suffix in the progress table
		F.Intrinsic.String.Build("Select Job, Suffix FROM GCG_4442_WOOD_PROG WHERE GRID = '{0}'",v.Args.Grid,V.Local.sSQL)
		F.Intrinsic.Control.If(V.DataTable.JobCheck.Exists,=,True)
			F.Data.DataTable.Close("JobCheck")
		F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'			F.ODBC.Connection!Con.OpenCompanyConnection
'		F.Intrinsic.Control.EndIf
		F.Data.DataTable.CreateFromSQL("JobCheck","con",V.Local.sSQL,True)
		F.Intrinsic.Control.If(V.DataTable.JobCheck.RowCount--,<>,-1)
			F.Intrinsic.String.Build("Select Distinct rtrim(Suffix) as Suffix, 'Y' as Metal From V_Job_Operations where Part IN('*LS0','*PU0','*TL0','*SA0','*SC0','*WD0') and Job = '{0}'",V.DataTable.JobCheck(V.DataTable.JobCheck.RowCount--).Job!FieldValTrim,V.Local.sSQL)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.Data.Dictionary.CreateFromSQL("Metal","con",V.Local.sSQL)
			F.Data.Dictionary.SetDefaultReturn("Metal","")
			F.Data.DataTable.FillFromDictionary("ComponentPartsParent","Metal","Suffix","Metal")
			F.Data.Dictionary.Close("Metal")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(V.DataTable.JobCheck.RowCount--,>,0)
			F.Intrinsic.String.Build("SELECT A.Job, A.Suffix, A.Seq, RTRIM(A.PART) AS Part, RTRIM(A.DESCRIPTION) AS Description, A.HOURS_ESTIMATED, A.HOURS_ACTUAL, A.LMO, RTRIM(A.OPERATION) AS OPERATION FROM V_JOB_OPERATIONS AS A WHERE (A.LMO = 'L' OR A.LMO = 'O')  AND A.SEQ < '995000' AND A.JOB = '{0}' AND A.SUFFIX IN (SELECT B.SUFFIX FROM GCG_4442_WOOD_PROG AS B WHERE B.GRID = '{1}' AND B.JOB = A.JOB AND B.SUFFIX > '000')  ORDER BY A.JOB, A.SEQ ASC ",v.DataTable.[v.Args.Grid](0).[v.Args.Grid]!FieldVal,v.Args.Grid,v.Local.sSQL)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("SELECT A.Job, A.Suffix, A.Seq, RTRIM(A.PART) AS Part, RTRIM(A.DESCRIPTION) AS Description, A.HOURS_ESTIMATED, A.HOURS_ACTUAL, A.LMO, RTRIM(A.OPERATION) AS OPERATION FROM V_JOB_OPERATIONS AS A WHERE (A.LMO = 'L' OR A.LMO = 'O')  AND A.SEQ < '995000' AND A.JOB = '{0}' AND A.SUFFIX IN (SELECT B.SUFFIX FROM GCG_4442_WOOD_PROG AS B WHERE B.GRID = '{1}' AND B.JOB = A.JOB AND (B.SUFFIX = '000' or B.SUFFIX = ''))  ORDER BY A.JOB, A.SEQ ASC ",v.DataTable.[v.Args.Grid](0).[v.Args.Grid]!FieldVal,v.Args.Grid,v.Local.sSQL)
		F.Intrinsic.Control.EndIf
		F.Data.DataTable.Close("JobCheck")
'		F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'			F.ODBC.Connection!Con.OpenCompanyConnection
'		F.Intrinsic.Control.EndIf
		f.Data.DataTable.CreateFromSQL("ComponentPartsParent$Parts","Con",v.Local.sSQL,True)
		
		f.Intrinsic.String.Build("Select Comments_1 From V_Job_Header Where Comments_1 like '%{0}%'",V.DataTable.ComponentPartsParent(V.Local.iCount).Job!FieldValTrim,V.Local.sSQL)
'		F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'			F.ODBC.Connection!Con.OpenCompanyConnection
'		F.Intrinsic.Control.EndIf
		F.Data.DataTable.CreateFromSQL("ReworkTemp","con",V.Local.sSQL)
		f.Data.DataView.Create("ReworkTemp","ReworkTemp")
		'seeing if job suffix has a rework workorder
		F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.ComponentPartsParent.RowCount--,1)
			F.Intrinsic.String.Build("COMMENTS_1 like '%{0}-{1}%'",V.DataTable.ComponentPartsParent(V.Local.iCount).Job!FieldValTrim,V.DataTable.ComponentPartsParent(V.Local.iCount).Suffix!FieldValTrim,V.Local.sSQL)
			F.Data.DataView.SetFilter("ReworkTemp","ReworkTemp",V.Local.sSQL)
			F.Intrinsic.Control.If(V.DataView.ReworkTemp!ReworkTemp.RowCount--,<>,-1)
				F.Data.DataTable.SetValue("ComponentPartsParent",V.Local.iCount,"Rework","Y")
			F.Intrinsic.Control.EndIf
			V.Local.sJob.Set(V.DataTable.ComponentPartsParent(V.Local.iCount).Job!FieldValTrim)
		F.Intrinsic.Control.Next(V.Local.iCount)
		
		f.Data.DataView.Create("ComponentPartsParent$Parts","ComponentPartsView",22,"LMO = 'O'","")
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.ComponentPartsParent$Parts!ComponentPartsView.RowCount--,1)
			'we need to set outside for the parent where it exists.
			f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}'",v.DataView.ComponentPartsParent$Parts!ComponentPartsView(v.Local.iCount).Job!FieldValTrim,v.DataView.ComponentPartsParent$Parts!ComponentPartsView(v.Local.iCount).Suffix!FieldValTrim,v.Local.sFilter)
			f.Data.DataView.SetFilter("ComponentPartsParent","ComponentParentView",v.Local.sFilter)
			f.Data.DataView.SetValue("ComponentPartsParent","ComponentParentView",-1,"Outside","Y")
		f.Intrinsic.Control.Next(v.Local.iCount)
		f.Data.DataView.SetFilter("ComponentPartsParent","ComponentParentView","")
		
		'Add relation on job and parent_Suffix
		F.Intrinsic.Control.Try
		f.Data.DataTable.AddRelation("ComponentPartsParent","JOB*!*SUFFIX","ComponentPartsParent$Parts","JOB*!*SUFFIX","relation1")
		F.Intrinsic.Control.Catch
		'adding code in on vacation this is to keep program from crashing until I can look more into whats causing the issue.
		'rlk 7/27/2018
		F.Intrinsic.Control.EndTry
	'	f.Data.DataTable.AddExpressionColumn("ComponentPartsParent$Parts","Yellow","String","IIF(LMO = 'O' AND PARENT(relation1).QTY_COMPLETED < PARENT(relation1).QTY_ORDER,'O',IIF(PARENT(relation1).QTY_COMPLETED >= PARENT(relation1).QTY_ORDER AND [HOURS_ACTUAL] < [HOURS_ESTIMATED] AND LMO = 'L' ,'Y',IIF([HOURS_ACTUAL] < [HOURS_ESTIMATED] AND LMO = 'L','R',IIF([HOURS_ACTUAL] >= [HOURS_ESTIMATED] AND LMO = 'L','G',''))))")
		f.Data.DataTable.AddExpressionColumn("ComponentPartsParent$Parts","Yellow","String","IIF(Part IN('*LS0','*PU0','*TL0','*SA0','*SC0','*WD0'),'P',IIF(LMO = 'O' AND PARENT(relation1).QTY_COMPLETED < PARENT(relation1).QTY_ORDER,'O',IIF([HOURS_ACTUAL] < [HOURS_ESTIMATED] AND LMO = 'L','R',IIF(PARENT(relation1).QTY_COMPLETED >= PARENT(relation1).QTY_ORDER AND [HOURS_ACTUAL] < [HOURS_ESTIMATED] AND LMO = 'L' ,'Y',IIF([HOURS_ACTUAL] >= [HOURS_ESTIMATED] AND LMO = 'L','G','')))))")
		
		gui.F_WoodKit.GsgcView.AddGridviewFromDataview("ComponentParentGrid","ComponentPartsParent","ComponentParentView")
		gui.F_WoodKit.GsgcView.AddGridviewFromDataview("ComponentPartsGrid","ComponentPartsParent","ComponentPartsView")
		
		'Create our styles for the grids.
		'Captions
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","Caption","Qty Needed")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_COMPLETED","Caption","Qty Scanned")
		
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","GRID","Visible",False)
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","PRIORITY","Visible",False)
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","Outside","Visible",False)
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","Metal","Visible",False)
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","Rework","Visible",False)
		'Set Header back color
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","JOB","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","SUFFIX","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","PART","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","DESCRIPTION","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_COMPLETED","HeaderBackColor","#0000ff")
		'Set Header Fore color
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","JOB","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","SUFFIX","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","PART","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","DESCRIPTION","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_COMPLETED","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","EditMaskType","numeric")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","EditMask", "####0.00")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","QTY_ORDER","EditMaskAsDisplayFormat", true)
		
		'Set Part Bold
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentParentGrid","PART","CellFontBold",True)
		'Add conditional formatting
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentParentGrid","QTY_COMPLETED","ParentRed","Expression","[QTY_COMPLETED] < [QTY_ORDER]")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentRed","backcolor","#ff93a5")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentRed","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentParentGrid","QTY_COMPLETED","ParentPurple","Expression","[QTY_COMPLETED] < [QTY_ORDER] and [Metal] = 'Y'")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentPurple","backcolor","#9975b9")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentPurple","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentParentGrid","QTY_COMPLETED","ParentGreen","Expression","[QTY_COMPLETED] >= [QTY_ORDER]")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentGreen","backcolor","PaleGreen")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentGreen","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentParentGrid","QTY_COMPLETED","ParentGreen2","Expression","[QTY_COMPLETED] >= [QTY_ORDER] and [Metal] = 'Y'")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentGreen2","backcolor","PaleGreen")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","QTY_COMPLETED","ParentGreen2","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentParentGrid","Outside","ParentOrange","Equal","Y")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","Outside","ParentOrange","backcolor","Orange")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","Outside","ParentOrange","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentParentGrid","Rework","ParentBlue","Equal","Y")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","Rework","ParentBlue","backcolor","#99cfe0")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentParentGrid","Rework","ParentBlue","ApplyToRow",True)
		
		'Get rid of hilighted row
		Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentParentGrid","OptionsSelectionEnableAppearanceFocusedRow",False)
		'Make it not editable and read only
		Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentParentGrid","readonly",True)
		Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentParentGrid","Editable",False)
		
		'Set captions
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ESTIMATED","Caption","Estimated Hours")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ACTUAL","Caption","Actual Hours")
		
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","Yellow","Visible",False)
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","LMO","Visible",False)
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","OPERATION","Visible",False)
		'Set Header Back Color
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","JOB","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","SUFFIX","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","SEQ","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","PART","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","DESCRIPTION","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ESTIMATED","HeaderBackColor","#0000ff")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ACTUAL","HeaderBackColor","#0000ff")
		'Set Header Fore Color
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","JOB","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","SUFFIX","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","SEQ","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","PART","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","DESCRIPTION","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ESTIMATED","HeaderForeColor","White")
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","HOURS_ACTUAL","HeaderForeColor","White")
		'Set Part Bold
		Gui.F_WoodKit.GsgcView.SetColumnProperty("ComponentPartsGrid","PART","CellFontBold",True)
		'Add conditional formatting
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentPartsGrid","YELLOW","Childyellow","EQUAL","Y")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","Childyellow","backcolor","#f5ff89")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","Childyellow","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentPartsGrid","YELLOW","ChildRED","EQUAL","R")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildRED","backcolor","Pink")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildRED","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentPartsGrid","YELLOW","ChildPurple","EQUAL","P")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildPurple","backcolor","#9975b9")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildPurple","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentPartsGrid","YELLOW","ChildGREEN","EQUAL","G")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildGREEN","backcolor","PaleGreen")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildGREEN","ApplyToRow",True)
		
		Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentPartsGrid","YELLOW","ChildORANGE","EQUAL","O")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildORANGE","backcolor","Orange")
		Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","YELLOW","ChildORANGE","ApplyToRow",True)
		
		'Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentPartsGrid","HOURS_ACTUAL","ChildGreen","Expression","[HOURS_ACTUAL] >= [HOURS_ESTIMATED]")
		'Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","HOURS_ACTUAL","ChildGreen","backcolor","PaleGreen")
		'Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","HOURS_ACTUAL","ChildGreen","ApplyToRow",True)
		
		'Gui.F_WoodKit.GsgcView.AddStyleFormatCondition("ComponentPartsGrid","HOURS_ACTUAL","ChildRed","Expression","[HOURS_ACTUAL] < [HOURS_ESTIMATED]")
		'Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","HOURS_ACTUAL","ChildRed","backcolor","Pink")
		'Gui.F_WoodKit.GsgcView.SetStyleFormatConditionProperty("ComponentPartsGrid","HOURS_ACTUAL","ChildRed","ApplyToRow",True)
		
		'Get rid of hilighted row
		Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentPartsGrid","OptionsSelectionEnableAppearanceFocusedRow",False)
		
		'make it not editable and read only
		Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentPartsGrid","readonly",True)
		Gui.F_WoodKit.GsgcView.SetGridviewProperty("ComponentPartsGrid","Editable",False)
		
		'Creae an empty grid for not viewing anything
		F.Intrinsic.Control.If(V.DataTable.Rework.Exists,=,True)
			F.Data.DataTable.Close("Rework")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.String.Build("SELECT JOB, SUFFIX, RTRIM(PART) AS PART, RTRIM(DESCRIPTION) AS DESCRIPTION, QTY_ORDER, RTRIM(COMMENTS_1) as COMMENTS_1,'' AS STATUS, '' AS GRID FROM V_JOB_HEADER WHERE COMMENTS_1 Like '%{0}%'",V.Local.sJob,V.Local.sSQL)
'		F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'			F.ODBC.Connection!Con.OpenCompanyConnection
'		F.Intrinsic.Control.EndIf
		F.Data.DataTable.CreateFromSQL("Rework","con",V.Local.sSQL,True)
		f.Data.DataView.Create("Rework","Rework")
		
		F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.Rework.RowCount--,1)
			F.Intrinsic.String.Build("Select Rec_ID, Kitting_Status From GCG_4442_Wood_Kit Where Job = '{0}'",V.DataTable.Rework(V.Local.iCount).Job!FieldValTrim,V.Local.sSQL)
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.UBound,=,1)
				F.Data.DataTable.SetValue("Rework",V.Local.iCount,"Grid",V.Local.sRet(0),"STATUS",V.Local.sRet(1))
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iCount)
		
		Gui.Form.GsGridControlReWork.AddGridviewFromDataview("ReworkGrid","Rework","Rework")
		
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","QTY_ORDER","Caption","Qty Needed")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","COMMENTS_1","Caption","Comment")
		
		'Set Header back color
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","JOB","HeaderBackColor","#0000ff")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","SUFFIX","HeaderBackColor","#0000ff")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","PART","HeaderBackColor","#0000ff")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","DESCRIPTION","HeaderBackColor","#0000ff")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","QTY_ORDER","HeaderBackColor","#0000ff")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","COMMENTS_1","HeaderBackColor","#0000ff")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","GRID","HeaderBackColor","#0000ff")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","STATUS","HeaderBackColor","#0000ff")
		
		'Set Header Fore color
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","JOB","HeaderForeColor","White")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","SUFFIX","HeaderForeColor","White")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","PART","HeaderForeColor","White")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","DESCRIPTION","HeaderForeColor","White")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","QTY_ORDER","HeaderForeColor","White")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","COMMENTS_1","HeaderForeColor","White")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","GRID","HeaderForeColor","White")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","STATUS","HeaderForeColor","White")
	
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","JOB","MaxWidth","100")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","Suffix","MaxWidth","100")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","Qty_Order","MaxWidth","100")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","Grid","MaxWidth","100")
		Gui.Form.GsGridControlReWork.SetColumnProperty("ReworkGrid","STATUS","MaxWidth","100")
		
		Gui.Form.GsGridControlReWork.SetGridviewProperty("ReworkGrid","Editable",False)
		Gui.Form.GsGridControlReWork.SetGridviewProperty("ReworkGrid","readonly",True)
	
		gui.F_WoodKit.GsgcView.MainView("ComponentParentGrid")
		Gui.Form.GsGridControlReWork.MainView("ReworkGrid")
		
	f.Intrinsic.Control.Else
		Gui.F_WoodKit.GsgcView.MainView("Empty")
		Gui.Form.GsGridControlReWork.MainView("EmptyRework")
	f.Intrinsic.Control.EndIf
	
	F.ODBC.Connection!Con.Close
	
	f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
		Gui.F_WoodKit.txtWO.Enabled(True)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.UnBlockEvents
	Gui.F_WoodKit.GsgcView.ResumeLayout()
	
	'f.Intrinsic.Control.For(v.Local.iCount,v.DataTable.ComponentPartsParent.RowCount--)
	'	Gui.F_WoodKit.GsgcView.ExpandMasterRow("ComponentParentGrid",v.Local.iCount)
	'f.Intrinsic.Control.Next(v.Local.iCount)

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.Selection.End

Program.Sub.MenuClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sForm.Declare(String)
	v.Local.sRet.Declare(String)
	v.Local.sInput.Declare(String)
	v.Local.sSeq.Declare(String)
	v.Local.sSQL.Declare(String)
	v.Local.sDate.Declare(String)
	v.Local.sJob.Declare(String)
	v.Local.sSuffix.Declare(String)
	v.Local.sKeySeq.Declare(String)
	v.Local.sGrid.Declare(String)
	v.Local.fQty.Declare(Float)
	v.Local.sProg.Declare(String)
	v.Local.sFile.Declare(String)
	v.Local.sXML.Declare(String)
	v.Local.sXML2.Declare(String)
	v.Local.bExist.Declare(Boolean)
	v.Local.sInput2.Declare(String)
	V.Local.iQty.Declare(Long)
	V.Local.sMsg.Declare(String)
	V.Local.iCount.Declare(Long)
	
	f.Intrinsic.Control.BlockEvents
	
	f.Intrinsic.Control.If(v.Caller.User.Trim,<>,"WKTIN","AND",v.Caller.User.Trim,<>,"WKTOUT")
'	f.Intrinsic.Control.If(v.Caller.User.Trim,<>,"WKTIN")
		'View user pressed the button, that's not okay with me.
		'DENIED! after we unblock events
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Args.MenuName,=,"CTXOVERRIDE")
		f.Intrinsic.Control.If(v.Global.sGrid.Right2,<,13)
			v.Local.sForm.Set("F_WoodKit")
		f.Intrinsic.Control.Else
			v.Local.sForm.Set("Form")
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.CallSub(GsGridControl_RowCellClick,"BUTTON","Left","RowIndex","5","ControlName",v.Global.sControl,"Column",v.Global.sGrid,"Screen",v.Local.sForm,"Override","True")
		Gui.[v.Local.sForm].[v.Global.sControl].SetColumnProperty(v.Global.sGrid,v.Global.sGrid,"cellbackcolor","White")
		Gui.[v.Local.sForm].[v.Global.sControl].SetColumnProperty(v.Global.sGrid,v.Global.sGrid,"headerbackcolor","#0000ff")
		Gui.F_WoodKit.GsgcView.MainView("Empty")
		
	f.Intrinsic.Control.ElseIf(v.Args.MenuName,=,"CTXOUTSIDE")
		f.Intrinsic.Control.If(v.Args.ItemName,=,"OUTSIDE")	
			'Check to make sure it is the Child Grid
			Gui.F_WoodKit.GsgcView.GetFocusedGridview(v.Local.sForm)
			f.Intrinsic.Control.If(v.Local.sForm,<>,"PARTS")
				'Not the child grid so don't do anything
				f.Intrinsic.Control.UnBlockEvents
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			'We are doing override so we need to grab the part that was selected and ask for the Quantity to create a PO
			Gui.F_WoodKit.GsgcView.GetSelectedRowsInFocus(v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet,<>,"","AND",v.Local.sRet,<>,"-1")
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				'We need to get the Part, Job, Suffix, and Seq
		'		Gui.F_WoodKit.GsgcView.GetRowHandle("ComponentPartsGrid",v.Local.sRet.Long,v.Local.sRet)
				Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentPartsGrid","Job",v.Local.sRet.Long,v.Local.sJob)
				Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentPartsGrid","Suffix",v.Local.sRet.Long,v.Local.sSuffix)
				Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentPartsGrid","Seq",v.Local.sRet.Long,v.Local.sSeq)
				'Do a Select statement on the DT to get the index
				f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",v.Local.sJob,v.Local.sSuffix,v.Local.sSeq,v.Local.sSQL)
				f.Data.DataTable.Select("ComponentPartsParent$Parts",v.Local.sSQL,v.Local.sRet)
				'Make sure we are on a Outside Seq
				f.Intrinsic.Control.If(v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).LMO!FieldValTrim,=,"O")
					f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}'",v.Local.sJob,v.Local.sSuffix,v.Local.sSQL)
					f.Data.DataTable.Select("ComponentPartsParent",v.Local.sSQL,v.Local.sInput)
					f.Intrinsic.Control.If(v.DataTable.ComponentPartsParent(v.Local.sInput.Long).Qty_Completed!FieldValFloat,>,0)
						'we are on an outside seq so lets ask them how many they want to make
						f.Intrinsic.String.Build("Enter Quantity for {0} Outside PO",v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Part!FieldValTrim,v.Local.sInput2)
						f.Intrinsic.UI.Inputbox(v.Local.sInput2,"Outside PO Creation","",v.Local.sInput2)
						f.Intrinsic.Math.IsNumeric(v.Local.sInput2,v.Local.bExist)
						f.Intrinsic.Control.If(v.Local.sInput2,<>,"***CANCEL***","AND",v.Local.sInput2,<>,"0",v.Local.bExist,=,True)
							f.Intrinsic.Math.Sub(v.DataTable.ComponentPartsParent(v.Local.sInput.Long).Qty_Completed!FieldValFloat,v.Local.sInput2.Long,v.Local.fQty)
							f.Intrinsic.Control.If(v.Local.fQty,>,-1)
								'Create Mat_Online record for Outside PO
'								F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'									F.ODBC.Connection!Con.OpenCompanyConnection
'								F.Intrinsic.Control.EndIf
								f.Intrinsic.String.Build("SELECT * FROM MAT_ONLINE WHERE JOB = '{0}' AND JOB_SUFFIX = '{1}' AND SEQUENCE = '{2}' ORDER BY KEY_SEQ DESC",v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Job!FieldValTrim,v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Suffix!FieldValTrim,v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Seq!FieldValTrim,v.Local.sSQL)
								f.ODBC.Connection!Con.OpenLocalRecordSetRW("rstPO",v.Local.sSQL)
								f.Intrinsic.Control.If(v.ODBC.Con!rstPO.EOF,=,False)
									'We have a record already so we need to incrament the SeqKey
									f.Intrinsic.Math.Add(v.ODBC.Con!rstPO.FieldValLong!KEY_SEQ,1,v.Local.sKeySeq)
									f.Intrinsic.String.LPad(v.Local.sKeySeq,"0",6,v.Local.sKeySeq)
								f.Intrinsic.Control.Else
									v.Local.sKeySeq.Set("000000")
								f.Intrinsic.Control.EndIf
								f.ODBC.Con!rstPO.AddNew
								f.ODBC.Con!rstPO.Set!JOB(v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Job!FieldValTrim)
								f.ODBC.Con!rstPO.Set!JOB_SUFFIX(v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Suffix!FieldValTrim)
								f.ODBC.Con!rstPO.Set!SEQUENCE(v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Seq!FieldValTrim)
								f.ODBC.Con!rstPO.Set!KEY_SEQ(v.Local.sKeySeq)
								f.ODBC.Con!rstPO.Set!PART(v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).Part!FieldValTrim)
								f.ODBC.Con!rstPO.Set!QUANTITY(v.Local.sInput2.Float)
		'						f.ODBC.Con!rstPO.Set!QUANTITY(1)
								f.Intrinsic.String.Format(v.Ambient.Date,"MMDDYY",v.Local.sDate)
								f.ODBC.Con!rstPO.Set!MOL_DATE(v.Local.sDate)
								f.ODBC.Con!rstPO.Set!MOL_TYPE("O")
								f.ODBC.Con!rstPO.Set!VENDOR(v.DataTable.ComponentPartsParent$Parts(v.Local.sRet.Long).OPERATION!FieldValTrim)
								f.ODBC.Con!rstPO.Update
								f.ODBC.Con!rstPO.Close
								
								'Now that we are done creating the Outside PO we need to remove it from the Grids.
			'					f.Intrinsic.Control.If(v.DataTable.ComponentPartsParent.RowCount,>,0)
			'						v.Global.sGrid.Set(v.DataTable.ComponentPartsParent(0).GRID!FieldValTrim)
			'						f.Intrinsic.String.Build("GsGridControl{0}",v.Global.sGrid,v.Global.sControl)
			'						f.Intrinsic.Control.CallSub(MenuClick,"Menuname","CTXOVERRIDE")
			'					f.Intrinsic.Control.EndIf
								'We need to remove 1 from the Progress Qty
								f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}' AND GRID = '{2}'",v.Local.sJob,v.Local.sSuffix,v.DataTable.ComponentPartsParent(v.Local.sInput.Long).Grid!FieldValTrim,v.Local.sSQL)
								f.Data.DataTable.Select("Progress",v.Local.sSQL,v.Local.sRet)
		'						f.Intrinsic.Math.Sub(v.DataTable.Progress(v.Local.sRet.Long).Qty_Completed!FieldValFloat,1,v.Local.fQty)
								f.Data.DataTable.SetValue("Progress",v.Local.sRet.Long,"QTY_COMPLETED",v.Local.fQty)
								f.Data.DataTable.SetValue("ComponentPartsParent",v.Local.sInput.Long,"QTY_COMPLETED",v.Local.fQty)
								
								'We need to update the x of x
								f.Intrinsic.String.Split(v.DataTable.[v.DataTable.Progress(v.Local.sRet.Long).Grid!FieldValTrim](4).[v.DataTable.Progress(v.Local.sRet.Long).Grid!FieldValTrim]!FieldValTrim," OF ",v.Local.sInput)
								v.Local.sInput.RedimPreserve(0,1)
								f.Intrinsic.Math.Sub(v.Local.sInput(0).Long,v.Local.sInput2.Long,v.Local.sInput(0))
								v.Global.sGrid.Set(v.DataTable.ComponentPartsParent(0).GRID!FieldValTrim)
								f.Intrinsic.Control.If(v.Local.sInput(0).Long,>,0)
									'we are not at 0 so keep updating.
									f.Intrinsic.Control.If(v.Global.sGrid.Right2,<,13)
										v.Local.sForm.Set("F_WoodKit")
									f.Intrinsic.Control.Else
										v.Local.sForm.Set("Form")
									f.Intrinsic.Control.EndIf
									f.Intrinsic.String.Build("ProgressBar{0}",v.Global.sGrid,v.Local.sProg)
									'set progress bar value
									Gui.[v.Local.sForm].[v.Local.sProg].Value(v.Local.sInput(0).Long)
									f.Intrinsic.String.Join(v.Local.sInput," OF ",v.Local.sInput)
									'Set x of x value in grid
									f.Data.DataTable.SetValue(v.Global.sGrid,4,v.Global.sGrid,v.Local.sInput)
									'Set x of x in table
									F.Intrinsic.String.Build("Select * From GCG_4442_WOOD_KIT Where Rec_ID = '{0}'",v.Global.sGrid,V.Local.sSQL)
'									F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'										F.ODBC.Connection!Con.OpenCompanyConnection
'									F.Intrinsic.Control.EndIf
									F.ODBC.Connection!con.OpenLocalRecordsetRW("rstKit",V.Local.sSQL)
									f.Intrinsic.Control.If(v.ODBC.Con!rstKit.EOF,=,False)
										'Save Kit Status
										f.ODBC.Con!rstKit.Set!Kitting_Status(v.Local.sInput)
										f.ODBC.Con!rstKit.Update
									f.Intrinsic.Control.EndIf
									f.ODBC.Con!rstKit.Close
									F.ODBC.Connection!Con.Close
									'Now we are done setting all the values we need to save the xmls for the other person
'									F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'										F.ODBC.Connection!Con.OpenCompanyConnection
'									F.Intrinsic.Control.EndIf
									f.Data.DataTable.SaveToDB("Progress","Con","GCG_4442_WOOD_PROG","JOB*!*SUFFIX*!*GRID*!*PRIORITY",2)
									f.Data.DataTable.AcceptChanges("Progress")
									f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
									f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
										f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
										f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
										f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
										f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\{1}_{2}.xml",v.Caller.FilesDir,v.Global.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
										f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'									f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
'										f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
'										f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
'										f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
'										f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\{1}_{2}.xml",v.Caller.FilesDir,v.Global.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
'										f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
									f.Intrinsic.Control.EndIf
									f.Intrinsic.UI.CloseWaitDialog
									f.Intrinsic.Control.Try
									f.Intrinsic.File.String2File(v.Local.sFile,"")
									f.Intrinsic.Control.Catch
									f.Intrinsic.Control.EndTry
									f.Data.DataTable.SaveToXML("Progress",0,False,v.Local.sXML)
									f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,"Progress",v.Local.sXML,v.Local.sXML)
									f.Intrinsic.File.Exists(v.Local.sSQL,v.Local.bExist)
									f.Intrinsic.Control.If(v.Local.bExist,=,True)
										f.Intrinsic.Control.Try
										f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML)
										f.Intrinsic.Control.Catch
										f.Intrinsic.Control.EndTry
									f.Intrinsic.Control.Else
										f.Intrinsic.Control.Try
										f.Intrinsic.File.String2File(v.Local.sSQL,v.Local.sXML)
										f.Intrinsic.Control.Catch
										f.Intrinsic.Control.EndTry
									f.Intrinsic.Control.EndIf
									f.Data.DataTable.SaveToXML(v.Global.sGrid,0,False,v.Local.sXML2)
									f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,v.Global.sGrid,v.Local.sXML2,v.Local.sXML2)
									f.Intrinsic.Control.Try
									f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML2)
									f.Intrinsic.Control.Catch
									f.Intrinsic.Control.EndTry
									f.Intrinsic.Control.Try
									f.Intrinsic.File.DeleteFile(v.Local.sFile)
									f.Intrinsic.Control.Catch
									f.Intrinsic.Control.EndTry
									
									
								f.Intrinsic.Control.Else
									'We are at 0 so we just need to remove everything from the screen.
									f.Intrinsic.String.Build("GsGridControl{0}",v.Global.sGrid,v.Global.sControl)
									f.Intrinsic.Control.CallSub(MenuClick,"Menuname","CTXOVERRIDE")
								f.Intrinsic.Control.EndIf
							f.Intrinsic.Control.EndIf
							
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"REMOVE")
			'We need to subtract a qty from the progress grid that we selected and subtract 1 from the top grid and progress bar
			F.Intrinsic.Control.Try
				Gui.F_WoodKit.GsgcView.GetFocusedGridview(v.Local.sForm)
			F.Intrinsic.Control.Catch
				F.Intrinsic.UI.Msgbox("Left Click on Row to Set Focus")
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndTry
			f.Intrinsic.Control.If(v.Local.sForm,=,"COMPONENTPARTSPARENT")
				Gui.F_WoodKit.GsgcView.GetSelectedRowsInFocus(v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,<>,"","AND",v.Local.sRet,<>,"-1")
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
					Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentParentGrid","Job",v.Local.sRet.Long,v.Local.sJob)
					Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentParentGrid","Suffix",v.Local.sRet.Long,v.Local.sSuffix)
					Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentParentGrid","GRID",v.Local.sRet.Long,v.Global.sGrid)
					'Do a Select statement on the DT to get the index
					f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}' AND GRID = '{2}' ",v.Local.sJob,v.Local.sSuffix,v.Global.sGrid,v.Local.sSQL)
					f.Data.DataTable.Select("Progress",v.Local.sSQL,v.Local.sRet)
					'Subtract 1 from the return qty
					f.Intrinsic.Math.Sub(v.DataTable.Progress(v.Local.sRet.Long).QTY_COMPLETED!FieldValFloat,1,v.Local.fQty)
					f.Intrinsic.Control.If(v.Local.fQty,>,-1)
						'set the qty
						f.Data.DataTable.SetValue("Progress",v.Local.sRet.Long,"QTY_COMPLETED",v.Local.fQty)
						'we need to get the displayed bottom grid and upate it
						f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}' ",v.Local.sJob,v.Local.sSuffix,v.Local.sSQL)
						f.Data.DataTable.Select("ComponentPartsParent",v.Local.sSQL,v.Local.sInput)
						f.Data.DataTable.SetValue("ComponentPartsParent",v.Local.sInput.Long,"QTY_COMPLETED",v.Local.fQty)
						'we need to update the top grid now
						f.Intrinsic.String.Split(v.DataTable.[v.Global.sGrid](4).[v.Global.sGrid]!FieldValTrim," OF ",v.Local.sInput)
						v.Local.sInput.RedimPreserve(0,1)
						f.Intrinsic.Math.Sub(v.Local.sInput(0).Long,1,v.Local.sInput(0))
						f.Intrinsic.Control.If(v.Local.sInput(0).Long,>,0)
							'we are not at 0 so keep updating
							f.Intrinsic.Control.If(v.Global.sGrid.Right2,<,13)
								v.Local.sForm.Set("F_WoodKit")
							f.Intrinsic.Control.Else
								v.Local.sForm.Set("Form")
							f.Intrinsic.Control.EndIf
							f.Intrinsic.String.Build("ProgressBar{0}",v.Global.sGrid,v.Local.sProg)
							'set progress bar value
							Gui.[v.Local.sForm].[v.Local.sProg].Value(v.Local.sInput(0).Long)
							f.Intrinsic.String.Join(v.Local.sInput," OF ",v.Local.sInput)
							'Set x of x value in grid
							f.Data.DataTable.SetValue(v.Global.sGrid,4,v.Global.sGrid,v.Local.sInput)
							'Set x of x in table
'							F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'								F.ODBC.Connection!Con.OpenCompanyConnection
'							F.Intrinsic.Control.EndIf
							F.Intrinsic.String.Build("Select * From GCG_4442_WOOD_KIT Where Rec_ID = '{0}'",v.Global.sGrid,V.Local.sSQL)
							F.ODBC.Connection!con.OpenLocalRecordsetRW("rstKit",V.Local.sSQL)
							f.Intrinsic.Control.If(v.ODBC.Con!rstKit.EOF,=,False)
								'Save Kit Status
								f.ODBC.Con!rstKit.Set!Kitting_Status(v.Local.sInput)
								f.ODBC.Con!rstKit.Update
							f.Intrinsic.Control.EndIf
							f.ODBC.Con!rstKit.Close
							'Now we are done setting all the values we need to save the xmls for the other person
'							F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'								F.ODBC.Connection!Con.OpenCompanyConnection
'							F.Intrinsic.Control.EndIf
							f.Data.DataTable.SaveToDB("Progress","Con","GCG_4442_WOOD_PROG","JOB*!*SUFFIX*!*GRID*!*PRIORITY",2)
							f.Data.DataTable.AcceptChanges("Progress")
							F.ODBC.Connection!Con.Close
							
							f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
							f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\{1}_{2}.xml",v.Caller.FilesDir,v.Global.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
								f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'							f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\{1}_{2}.xml",v.Caller.FilesDir,v.Global.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
'								f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
							f.Intrinsic.Control.EndIf
							f.Intrinsic.UI.CloseWaitDialog
							f.Intrinsic.Control.Try
							f.Intrinsic.File.String2File(v.Local.sFile,"")
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
							f.Data.DataTable.SaveToXML("Progress",0,False,v.Local.sXML)
							f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,"Progress",v.Local.sXML,v.Local.sXML)
							f.Intrinsic.File.Exists(v.Local.sSQL,v.Local.bExist)
							f.Intrinsic.Control.If(v.Local.bExist,=,True)
								f.Intrinsic.Control.Try
								f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML)
								f.Intrinsic.Control.Catch
								f.Intrinsic.Control.EndTry
							f.Intrinsic.Control.Else
								f.Intrinsic.Control.Try
								f.Intrinsic.File.String2File(v.Local.sSQL,v.Local.sXML)
								f.Intrinsic.Control.Catch
								f.Intrinsic.Control.EndTry
							f.Intrinsic.Control.EndIf
							f.Data.DataTable.SaveToXML(v.Global.sGrid,0,False,v.Local.sXML2)
							f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,v.Global.sGrid,v.Local.sXML2,v.Local.sXML2)
							f.Intrinsic.Control.Try
							f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML2)
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
							f.Intrinsic.Control.Try
							f.Intrinsic.File.DeleteFile(v.Local.sFile)
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
						f.Intrinsic.Control.Else
							'We are at 0 so we just need to remove everything from the screen.
							f.Intrinsic.String.Build("GsGridControl{0}",v.Global.sGrid,v.Global.sControl)
							f.Intrinsic.Control.CallSub(MenuClick,"Menuname","CTXOVERRIDE")
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"OVERRIDE")
			'We need to subtract a qty from the progress grid that we selected and subtract 1 from the top grid and progress bar
			F.Intrinsic.Control.Try
				Gui.F_WoodKit.GsgcView.GetFocusedGridview(v.Local.sForm)
			F.Intrinsic.Control.Catch
				F.Intrinsic.UI.Msgbox("Left Click on Row to Set Focus")
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndTry
			f.Intrinsic.Control.If(v.Local.sForm,=,"COMPONENTPARTSPARENT")
				Gui.F_WoodKit.GsgcView.GetSelectedRowsInFocus(v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,<>,"","AND",v.Local.sRet,<>,"-1")
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
					Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentParentGrid","Job",v.Local.sRet.Long,v.Local.sJob)
					Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentParentGrid","Suffix",v.Local.sRet.Long,v.Local.sSuffix)
					Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentParentGrid","GRID",v.Local.sRet.Long,v.Global.sGrid)
					'Do a Select statement on the DT to get the index
					f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}' AND GRID = '{2}' ",v.Local.sJob,v.Local.sSuffix,v.Global.sGrid,v.Local.sSQL)
					f.Data.DataTable.Select("Progress",v.Local.sSQL,v.Local.sRet)
					'Add entered qty 
	'				Function.Intrinsic.Debug.InvokeDebugger
	'				Function.Intrinsic.Debug.Stop
					F.Intrinsic.Math.Sub(v.DataTable.Progress(v.Local.sRet.Long).Qty_Order!FieldValLong,v.DataTable.Progress(v.Local.sRet.Long).Qty_Completed!FieldValLong,V.Local.iQty)
					Gui.Form_QtyOverride.txtQtyNeeded.Text(V.Local.iQty)
					F.Intrinsic.String.Build("Job:{0} Suffix:{1} Part:{2}",v.DataTable.Progress(v.Local.sRet.Long).Job!FieldValTrim,v.DataTable.Progress(v.Local.sRet.Long).Suffix!FieldValTrim,v.DataTable.Progress(v.Local.sRet.Long).Part!FieldValTrim,V.Local.sMsg)
					Gui.Form_QtyOverride.lblJobSuffixPart.Caption(V.Local.sMsg)
					Gui.Form_QtyOverride..Show
					F.Intrinsic.Control.UnBlockEvents
					Gui.Form_QtyOverride.txtQtyOpen.SetFocus
					Gui.Form_QtyOverride.txtQtyOpen.SelectAll
					GUi.F_WoodKit..Enabled(False)
					Gui.Form_QtyOverride..WaitForDismiss
					F.Intrinsic.Control.BlockEvents
					
					F.Intrinsic.Control.If(V.Screen.Form_QtyOverride!txtQtyOpen.Text,>,0)
						f.Intrinsic.Math.Add(v.DataTable.Progress(v.Local.sRet.Long).Qty_Completed!FieldValLong,V.Screen.Form_QtyOverride!txtQtyOpen.Text,v.Local.fQty)
						'set the qty
						f.Data.DataTable.SetValue("Progress",v.Local.sRet.Long,"QTY_COMPLETED",v.Local.fQty)
						'we need to get the displayed bottom grid and upate it
						f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}' ",v.Local.sJob,v.Local.sSuffix,v.Local.sSQL)
						f.Data.DataTable.Select("ComponentPartsParent",v.Local.sSQL,v.Local.sInput)
						f.Data.DataTable.SetValue("ComponentPartsParent",v.Local.sInput.Long,"QTY_COMPLETED",v.Local.fQty)
						'we need to update the top grid now
						f.Intrinsic.String.Split(v.DataTable.[v.Global.sGrid](4).[v.Global.sGrid]!FieldValTrim," OF ",v.Local.sInput)
						v.Local.sInput.RedimPreserve(0,1)
						f.Intrinsic.Math.Add(v.Local.sInput(0).Long,V.Screen.Form_QtyOverride!txtQtyOpen.Text,v.Local.sInput(0))
						V.Local.fQty.Set(V.Local.sInput(0).Long)
						f.Intrinsic.Control.If(v.Local.sInput(0).Long,>,0)
							'we are not at 0 so keep updating
							f.Intrinsic.Control.If(v.Global.sGrid.Right2,<,13)
								v.Local.sForm.Set("F_WoodKit")
							f.Intrinsic.Control.Else
								v.Local.sForm.Set("Form")
							f.Intrinsic.Control.EndIf
							f.Intrinsic.String.Build("ProgressBar{0}",v.Global.sGrid,v.Local.sProg)
							'set progress bar value
							Gui.[v.Local.sForm].[v.Local.sProg].Value(v.Local.sInput(0).Long)
							f.Intrinsic.String.Join(v.Local.sInput," OF ",v.Local.sInput)
							'Set x of x value in grid
							f.Data.DataTable.SetValue(v.Global.sGrid,4,v.Global.sGrid,v.Local.sInput)
							'Set x of x in table
'							F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'								F.ODBC.Connection!Con.OpenCompanyConnection
'							F.Intrinsic.Control.EndIf
							F.Intrinsic.String.Build("Select * From GCG_4442_WOOD_KIT Where Rec_ID = '{0}'",v.Global.sGrid,V.Local.sSQL)
							F.ODBC.Connection!con.OpenLocalRecordsetRW("rstKit",V.Local.sSQL)
							f.Intrinsic.Control.If(v.ODBC.Con!rstKit.EOF,=,False)
								'Save Kit Status
								f.ODBC.Con!rstKit.Set!Kitting_Status(v.Local.sInput)
								f.ODBC.Con!rstKit.Update
							f.Intrinsic.Control.EndIf
							f.ODBC.Con!rstKit.Close
							
							f.Intrinsic.Control.If(V.Local.fQty,<=,v.Screen.[v.Local.sForm]![v.Local.sProg].Max)
	'							gui.[v.Local.sForm].[v.Local.sProg].Value(v.Local.fQty)
								f.Intrinsic.Control.If(v.Local.fQty,=,v.Screen.[v.Local.sForm]![v.Local.sProg].Max)
									F.Intrinsic.String.Build("GsGridControl{0}",v.Global.sGrid,V.Local.sGrid)
									gui.[v.Local.sForm].[V.Local.sGrid].HideRow(v.Global.sGrid,5,False)
								f.Intrinsic.Control.EndIf
							F.Intrinsic.Control.EndIf
							
							'Now we are done setting all the values we need to save the xmls for the other person
'							F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'								F.ODBC.Connection!Con.OpenCompanyConnection
'							F.Intrinsic.Control.EndIf
							f.Data.DataTable.SaveToDB("Progress","Con","GCG_4442_WOOD_PROG","JOB*!*SUFFIX*!*GRID*!*PRIORITY",2)
							f.Data.DataTable.AcceptChanges("Progress")
							F.ODBC.Connection!Con.Close
							
							f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
							f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
								f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\{1}_{2}.xml",v.Caller.FilesDir,v.Global.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
								f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'							f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
'								f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\{1}_{2}.xml",v.Caller.FilesDir,v.Global.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
'								f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
							f.Intrinsic.Control.EndIf
							f.Intrinsic.UI.CloseWaitDialog
							f.Intrinsic.Control.Try
							f.Intrinsic.File.String2File(v.Local.sFile,"")
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
							f.Data.DataTable.SaveToXML("Progress",0,False,v.Local.sXML)
							f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,"Progress",v.Local.sXML,v.Local.sXML)
							f.Intrinsic.File.Exists(v.Local.sSQL,v.Local.bExist)
							f.Intrinsic.Control.If(v.Local.bExist,=,True)
								f.Intrinsic.Control.Try
								f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML)
								f.Intrinsic.Control.Catch
								f.Intrinsic.Control.EndTry
							f.Intrinsic.Control.Else
								f.Intrinsic.Control.Try
								f.Intrinsic.File.String2File(v.Local.sSQL,v.Local.sXML)
								f.Intrinsic.Control.Catch
								f.Intrinsic.Control.EndTry
							f.Intrinsic.Control.EndIf
							f.Data.DataTable.SaveToXML(v.Global.sGrid,0,False,v.Local.sXML2)
							f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,v.Global.sGrid,v.Local.sXML2,v.Local.sXML2)
							f.Intrinsic.Control.Try
							f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML2)
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
							f.Intrinsic.Control.Try
							f.Intrinsic.File.DeleteFile(v.Local.sFile)
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
							
							Gui.Form_QtyOverride.txtQtyOpen.Text(0)
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf
					GUi.F_WoodKit..Enabled(True)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.ElseIf(v.Args.ItemName,=,"REMOVEJOB")
			F.Intrinsic.Control.Try
				Gui.F_WoodKit.GsgcView.GetFocusedGridview(v.Local.sForm)
			F.Intrinsic.Control.Catch
				F.Intrinsic.UI.Msgbox("Left Click on Row to Set Focus")
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndTry
			f.Intrinsic.Control.If(v.Local.sForm,=,"COMPONENTPARTSPARENT")
				Gui.F_WoodKit.GsgcView.GetSelectedRowsInFocus(v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,<>,"","AND",v.Local.sRet,<>,"-1")
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
					Gui.F_WoodKit.GsgcView.GetCellValueByColumnName("ComponentParentGrid","Job",v.Local.sRet.Long,v.Local.sJob)
					F.Data.DataView.Create("Progress","JobDelete")
	
					V.Local.sGrid.Set(V.DataTable.ComponentPartsParent(V.DataTable.ComponentPartsParent.RowCount--).Grid!FieldValTrim)
					F.Intrinsic.String.Build("GRID = '{0}'",V.Local.sGrid,V.Local.sSQL)
					F.Data.DataView.SetFilter("Progress","JobDelete",V.Local.sSql)
					F.Data.DataView.ToDataTableDistinct("Progress","JobDelete","JobDeleteTemp","Job")
					F.Intrinsic.Control.If(V.DataTable.JobDeleteTemp.RowCount--,<,1)
						F.Data.DataTable.Close("JobDeleteTemp")
						F.Data.DataView.Close("Progress","JobDelete")
						F.Intrinsic.Control.UnBlockEvents
						F.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Build("Are you sure you want to remove Job: {0}",V.Local.sJob,V.Local.sRet)
					F.Intrinsic.UI.Msgbox(V.Local.sRet,"Attention",4,V.Local.iQty)
					F.Intrinsic.Control.If(V.Local.iQty,=,7)
						F.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf
	
					F.Intrinsic.UI.InvokeWaitDialog("Removing Job From Grid.........")
					Gui.F_WoodKit.txtWO.Enabled(False)
					
					F.Intrinsic.String.Build("Job = '{0}' and Grid = '{1}'",V.Local.sJob,V.Local.sGrid,V.Local.sSql)
					F.Data.DataView.SetFilter("Progress","JobDelete",V.Local.sSQL)
					
					F.Intrinsic.Control.For(V.Local.iCount,V.DataView.Progress!JobDelete.RowCount--,0,-1)
						F.Data.DataTable.DeleteRow("Progress",V.DataView.Progress!JobDelete(V.Local.iCount).DataTableIndex)
					F.Intrinsic.Control.Next(V.Local.iCount)
					
					F.Data.DataView.Close("Progress","JobDelete")
					
'					F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'						F.ODBC.Connection!Con.OpenCompanyConnection
'					F.Intrinsic.Control.EndIf
					'Now we are done setting all the values we need to save the xmls for the other person
					f.Data.DataTable.SaveToDB("Progress","Con","GCG_4442_WOOD_PROG","JOB*!*SUFFIX*!*GRID*!*PRIORITY",4)
					f.Data.DataTable.AcceptChanges("Progress")
					
					F.Intrinsic.String.Build("Delete From GCG_4442_Wood_Kit Where Job <> '{0}' and Rec_Id = '{1}'",V.DataTable.[V.Local.sGrid](0).[V.Local.sGrid]!FieldValTrim,V.Local.sGrid,V.Local.sSql)
'					F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'						F.ODBC.Connection!Con.OpenCompanyConnection
'					F.Intrinsic.Control.EndIf
					F.ODBC.Connection!Con.Execute(V.Local.sSql)
					
					F.Intrinsic.String.Build("Select Sum(Qty_Completed) as Qty_Completed, Sum(Qty_Order) From GCG_4442_Wood_Prog Where Grid = '{0}'",V.Local.sGrid,v.Local.sSql)
					f.Intrinsic.Control.If(V.Local.sGrid.Right2,<,13)
						v.Local.sForm.Set("F_WoodKit")
					f.Intrinsic.Control.Else
						v.Local.sForm.Set("Form")
					f.Intrinsic.Control.EndIf
							
					f.Intrinsic.String.Build("ProgressBar{0}",V.Local.sGrid,v.Local.sProg)
					
'					F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'						F.ODBC.Connection!Con.OpenCompanyConnection
'					F.Intrinsic.Control.EndIf
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
					F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
					F.Intrinsic.Control.If(V.Local.sRet.UBound,=,1)
						F.Intrinsic.Control.If(V.Local.sRet(0),>=,V.Local.sRet(1))
							'set progress bar value
							Gui.[v.Local.sForm].[v.Local.sProg].Value(V.Local.sRet(1).Long)
							Gui.[v.Local.sForm].[v.Local.sProg].Max(V.Local.sRet(1).Long)
							F.Intrinsic.String.Build("{0} of {1}",V.Local.sRet(1),V.Local.sRet(1),V.Local.sRet)
						F.Intrinsic.Control.Else
							Gui.[v.Local.sForm].[v.Local.sProg].Value(V.Local.sRet(0).Long)
							Gui.[v.Local.sForm].[v.Local.sProg].Max(V.Local.sRet(1).Long)
							F.Intrinsic.String.Build("{0} of {1}",V.Local.sRet(0),V.Local.sRet(1),V.Local.sRet)
						F.Intrinsic.Control.EndIf
						F.Data.DataTable.SetValue(V.Local.sGrid,4,V.Local.sGrid,V.Local.sRet)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
						F.ODBC.Connection!Con.Close
					F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.CallSub(Selection,"GRID",V.Local.sGrid)
					f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
					f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
						f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
						f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
						f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
						f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\{1}_{2}.xml",v.Caller.FilesDir,V.Local.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
						f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
'					f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
'						f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
'						f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\Progress_{1}.xml",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sXML)
'						f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sSql)
'						f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\{1}_{2}.xml",v.Caller.FilesDir,V.Local.sGrid,V.Caller.CompanyCode,v.Local.sXML2)
'						f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
					f.Intrinsic.Control.EndIf
					f.Intrinsic.UI.CloseWaitDialog
					f.Intrinsic.Control.Try
					f.Intrinsic.File.String2File(v.Local.sFile,"")
					f.Intrinsic.Control.Catch
					f.Intrinsic.Control.EndTry
					f.Data.DataTable.SaveToXML("Progress",0,False,v.Local.sXML)
					f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,"Progress",v.Local.sXML,v.Local.sXML)
					f.Intrinsic.File.Exists(v.Local.sSQL,v.Local.bExist)
					f.Intrinsic.Control.If(v.Local.bExist,=,True)
						f.Intrinsic.Control.Try
						f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML)
						f.Intrinsic.Control.Catch
						f.Intrinsic.Control.EndTry
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.Try
						f.Intrinsic.File.String2File(v.Local.sSQL,v.Local.sXML)
						f.Intrinsic.Control.Catch
						f.Intrinsic.Control.EndTry
					f.Intrinsic.Control.EndIf
					f.Data.DataTable.SaveToXML(V.Local.sGrid,0,False,v.Local.sXML2)
					f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Caller.User.Trim,V.Local.sGrid,v.Local.sXML2,v.Local.sXML2)
					f.Intrinsic.Control.Try
					f.Intrinsic.File.Append2FileNewLine(v.Local.sSQL,v.Local.sXML2)
					f.Intrinsic.Control.Catch
					f.Intrinsic.Control.EndTry
					f.Intrinsic.Control.Try
					f.Intrinsic.File.DeleteFile(v.Local.sFile)
					f.Intrinsic.Control.Catch
					f.Intrinsic.Control.EndTry
					Gui.F_WoodKit.txtWO.Enabled(True)
					F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.UnBlockEvents
	
	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
		F.ODBC.Connection!Con.Close
	F.Intrinsic.Control.EndIf
	
	gui.F_WoodKit.txtWO.SetFocus
	gui.F_WoodKit.txtWO.SelectAll

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.MenuClick.End

Program.Sub.LookUp.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sSQL.Declare(String)
	v.Local.iCount.Declare(Long)
	V.Local.sPsuffix.Declare(String)
	V.Local.sRet.Declare(String)
	V.Local.sDT.Declare(String)
	V.Local.sGrid.Declare(String)
	V.Local.sForm.Declare(String)
	V.Local.sProg.Declare(String)
	
	'We will check in our tables to see if we have a job already.
	'If we have a job then we will see if we need any more quantity for the Suffix.
	'If we need more qty for the Suffix then we will update existing job.
	'If we don't need any more qty for the Suffix then we will create a new job
	
	'check if any bins have been removed from the wkout station.
	'added 12/5/18 by rlk no longer using file system to update the wktin station. using pervasive talbe to track bins that have been checked out.
	V.Local.sSQL.Set("Select Bins From GCG_4442_Empty_Bins")
'	F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'		F.ODBC.Connection!Con.OpenCompanyConnection
'	F.Intrinsic.Control.EndIf
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		F.Intrinsic.String.Split(V.Local.sRet,"#$#",V.Local.sDT)
		F.Intrinsic.String.Replace(V.Local.sRet,"#$#","','",V.Local.sRet)
		F.Intrinsic.String.Build("('{0}')",V.Local.sRet,V.Local.sRet)
		F.Intrinsic.String.Build("GRID IN{0}",V.Local.sRet,V.Local.sSQL)
		F.Intrinsic.Control.If(V.DataView.Progress!TempProgress.Exists)
			F.Data.DataView.Close("Progress","TempProgress")
		F.Intrinsic.Control.EndIf
		F.Data.DataView.Create("Progress","TempProgress",22,V.Local.sSQL,"")
		F.Intrinsic.Control.DoUntil(V.DataView.Progress!TempProgress.RowCount--,=,-1)
			F.Data.DataTable.DeleteRow("Progress",V.DataView.Progress!TempProgress(V.DataView.Progress!TempProgress.RowCount--).DataTableIndex)
		F.Intrinsic.Control.Loop
		
		F.Data.DataTable.AcceptChanges("Progress")
		
		F.Intrinsic.Control.For(V.Local.iCount,0,V.Local.sDT.UBound,1)
			F.Data.DataTable.SetValue(V.Local.sDT(V.Local.iCount),0,V.Local.sDT(V.Local.iCount),"")
			F.Data.DataTable.SetValue(V.Local.sDT(V.Local.iCount),1,V.Local.sDT(V.Local.iCount),"")
			F.Data.DataTable.SetValue(V.Local.sDT(V.Local.iCount),2,V.Local.sDT(V.Local.iCount),"")
			F.Data.DataTable.SetValue(V.Local.sDT(V.Local.iCount),3,V.Local.sDT(V.Local.iCount),"")
			F.Data.DataTable.SetValue(V.Local.sDT(V.Local.iCount),4,V.Local.sDT(V.Local.iCount),"")
			
			'Check the grid to see which form it is
			f.Intrinsic.Control.If(v.Local.sDT(V.Local.iCount).Right2,<,13)
				v.Local.sForm.Set("F_WoodKit")
			f.Intrinsic.Control.Else
				v.Local.sForm.Set("Form")
			f.Intrinsic.Control.EndIf
			
			F.Intrinsic.String.Build("GsGridControl{0}",V.Local.sDT(V.Local.iCount).Trim,V.Local.sGrid)
			F.Intrinsic.String.Build("ProgressBar{0}",V.Local.sDT(V.Local.iCount).Trim,V.Local.sProg)
			
			Gui.[v.Local.sForm].[V.Local.sGrid].HideRow(V.Local.sDT(V.Local.iCount).Trim,5,True)

			'set progress bar back to 0
			Gui.[v.Local.sForm].[v.Local.sProg].Value(0)
			
			Gui.[v.Local.sForm].[V.Local.sGrid].SetColumnProperty(v.Local.sDT(V.Local.iCount).Trim,v.Local.sDT(V.Local.iCount).Trim,"cellbackcolor","White")
			Gui.[v.Local.sForm].[V.Local.sGrid].SetColumnProperty(v.Local.sDT(V.Local.iCount).Trim,v.Local.sDT(V.Local.iCount).Trim,"headerbackcolor","#0000ff")
		F.Intrinsic.Control.Next(V.Local.iCount)
		
		F.Intrinsic.Control.If(V.DataView.Progress!TempProgress.Exists)
			F.Data.DataView.Close("Progress","TempProgress")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Build("Delete From GCG_4442_Empty_Bins Where Bins in{0}",V.Local.sRet,V.Local.sSQL)
		F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	F.Intrinsic.Control.EndIf

	'Create a filter on our Progress table to see if we have anything in it
	f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}'",v.Args.Job,v.Args.Suffix,v.Local.sSQL)
	f.Data.DataView.SetFilter("Progress","ProgressView",v.Local.sSQL)
	f.Data.DataView.SetSort("Progress","ProgressView","PRIORITY ASC")
	'Check to see if we have anything in the view
	f.Intrinsic.Control.If(v.DataView.Progress!ProgressView.RowCount,>,0)
		'We have something
		'Now we need to determin if we need to just add it to existing or we have enough and need to create a new job
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.Progress!ProgressView.RowCount--,1)
			'We need to see if our Order Qty is greater than our complete qty
			f.Intrinsic.Control.If(v.DataView.Progress!ProgressView(v.Local.iCount).Qty_Completed!FieldVal,<,v.DataView.Progress!ProgressView(v.Local.iCount).Qty_Order!FieldVal)
				'we still need more for this job so just update existing job
				f.Intrinsic.Variable.AddRV("Step","Update","DT",v.DataView.Progress!ProgressView(v.Local.iCount).Grid!FieldVal)
				f.Intrinsic.Control.ExitFor(v.Local.iCount)
			f.Intrinsic.Control.Else
				'Qty has been met so we need to go to the next one, if we don't have a next one then we need to add it as a new job
				f.Intrinsic.Control.If(v.Local.iCount,=,v.DataView.Progress!ProgressView.RowCount--)
					f.Intrinsic.Variable.AddRV("Step","New")
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Next(v.Local.iCount)
		f.Intrinsic.Control.DoEvents
	f.Intrinsic.Control.Else
		
		'Sets check and see if we have the Job at all.
	'	f.Intrinsic.String.Build("JOB = '{0}' ",v.Args.Job,v.Local.sSQL)
	'	f.Data.DataView.SetFilter("Progress","ProgressView",v.Local.sSQL)
		f.Data.DataView.SetSort("Progress","ProgressView","PRIORITY ASC, GRID ASC")
		f.Intrinsic.Control.If(v.DataView.Progress!ProgressView.RowCount,>,0)
			'We have the job, we just need to update all of the grids to have the missing Suffixes
			f.Data.DataView.ToDataTableDistinct("Progress","ProgressView","NewSuffix","JOB*!*GRID*!*PRIORITY*!*SUFFIX",True)
			'Lets loop through our Distinct DataTable of Job and Grid and add the missing Suffixes to the Progress DT
'			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'				F.ODBC.Connection!Con.OpenCompanyConnection
'			F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.NewSuffix.RowCount--,1)
	'			f.Intrinsic.String.Build("SELECT A.JOB, A.SUFFIX, RTRIM(A.PART) AS PART,RTRIM(A.DESCRIPTION) AS DESCRIPTION, A.QTY_ORDER / (SELECT B.QTY_ORDER FROM V_JOB_HEADER AS B WHERE B.JOB = A.JOB AND B.SUFFIX = '000') AS QTY_ORDER, CAST(0 AS DOUBLE) AS QTY_COMPLETED, '{1}' AS GRID, {2} AS PRIORITY FROM V_JOB_HEADER AS A WHERE A.SUFFIX NOT IN (SELECT C.SUFFIX FROM GCG_4442_WOOD_PROG AS C WHERE C.JOB = A.JOB AND C.GRID = '{1}') AND A.SUFFIX <> '000' AND A.JOB = '{0}' ",v.DataTable.NewSuffix(v.Local.iCount).JOB!FieldValTrim,v.DataTable.NewSuffix(v.Local.iCount).GRID!FieldValTrim,v.DataTable.NewSuffix(v.Local.iCount).PRIORITY!FieldValLong,v.Local.sSQL)
				F.Intrinsic.String.Build("Selec PARENT_SUFFIX_PARENT From V_Job_Header Where Job = '{0}' and Suffix = '{1}'",v.DataTable.NewSuffix(v.Local.iCount).JOB!FieldValTrim,v.DataTable.NewSuffix(v.Local.iCount).SUFFIX!FieldValTrim,V.Local.sSQL)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sPsuffix)
				F.Intrinsic.String.Replace(V.Local.sPsuffix,"*!*","",V.Local.sPsuffix)
				F.Intrinsic.String.Replace(V.Local.sPsuffix,"#$#","",V.Local.sPsuffix)
				F.Intrinsic.String.Build("SELECT SUFFIX From V_Job_Operations Where Part in ('*EW0','*EP0','*EA0') and Job = '{0}' and LMO = 'L' and Part <> ''",V.Args.Job,V.Local.sSQL)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
				F.Intrinsic.String.Replace(V.Local.sSQL,"*!*","",V.Local.sSQL)
				F.Intrinsic.String.Replace(V.Local.sSQL,"#$#","','",V.Local.sSQL)
				F.Intrinsic.String.Build("'{0}'",V.Local.sSQL,V.Local.sSQL)
				f.Intrinsic.String.Build("SELECT A.JOB, A.SUFFIX, RTRIM(A.PART) AS PART,RTRIM(A.DESCRIPTION) AS DESCRIPTION, A.QTY_ORDER / (SELECT B.QTY_ORDER FROM V_JOB_HEADER AS B WHERE B.JOB = A.JOB AND B.PARENT_SUFFIX_PARENT = '{3}') AS QTY_ORDER, CAST(0 AS DOUBLE) AS QTY_COMPLETED, '{1}' AS GRID, {2} AS PRIORITY FROM V_JOB_HEADER AS A WHERE A.SUFFIX NOT IN (SELECT C.SUFFIX FROM GCG_4442_WOOD_PROG AS C WHERE C.JOB = A.JOB AND C.GRID = '{1}') AND A.SUFFIX <> '000' AND A.SUFFIX NOT IN({4}) AND A.JOB = '{0}' ",v.DataTable.NewSuffix(v.Local.iCount).JOB!FieldValTrim,v.DataTable.NewSuffix(v.Local.iCount).GRID!FieldValTrim,v.DataTable.NewSuffix(v.Local.iCount).PRIORITY!FieldValLong,V.Local.sPsuffix,V.Local.sSQL,v.Local.sSQL)
'				F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'					F.ODBC.Connection!Con.OpenCompanyConnection
'				F.Intrinsic.Control.EndIf
				f.Data.DataTable.CreateFromSQL("TempNewSuffix","Con",v.Local.sSQL,True)
				f.Intrinsic.Control.If(v.DataTable.TempNewSuffix.RowCount,>,0)
					'We have rows so lets merge them into Progress table
					f.Data.DataTable.Merge("TempNewSuffix","Progress",True,2)
				f.Intrinsic.Control.EndIf
				'Close the Temp Table
				f.Data.DataTable.Close("TempNewSuffix")
			f.Intrinsic.Control.Next(v.Local.iCount)
			F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,1)
				F.ODBC.Connection!Con.Close
			F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.DoEvents
			'Close New Suffix table
			f.Data.DataTable.Close("NewSuffix")
			'Lets refilter our progress DT and check again.
			f.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}'",v.Args.Job,v.Args.Suffix,v.Local.sSQL)
			f.Data.DataView.SetFilter("Progress","ProgressView",v.Local.sSQL)
			f.Data.DataView.SetSort("Progress","ProgressView","PRIORITY ASC")
			f.Intrinsic.Control.If(v.DataView.Progress!ProgressView.RowCount,>,0)
				'We have something
				'Now we need to determin if we need to just add it to existing or we have enough and need to create a new job
				f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.Progress!ProgressView.RowCount--,1)
					'We need to see if our Order Qty is greater than our complete qty
					f.Intrinsic.Control.If(v.DataView.Progress!ProgressView(v.Local.iCount).Qty_Completed!FieldVal,<,v.DataView.Progress!ProgressView(v.Local.iCount).Qty_Order!FieldVal)
						'we still need more for this job so just update existing job
						f.Intrinsic.Variable.AddRV("Step","Update","DT",v.DataView.Progress!ProgressView(v.Local.iCount).Grid!FieldVal)
						f.Intrinsic.Control.ExitFor(v.Local.iCount)
					f.Intrinsic.Control.Else
						'Qty has been met so we need to go to the next one, if we don't have a next one then we need to add it as a new job
						f.Intrinsic.Control.If(v.Local.iCount,=,v.DataView.Progress!ProgressView.RowCount--)
							f.Intrinsic.Variable.AddRV("Step","New")
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.Next(v.Local.iCount)
				f.Intrinsic.Control.DoEvents
			f.Intrinsic.Control.Else
				'We don't have the job so it is just a new job
				f.Intrinsic.Variable.AddRV("Step","New")
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Else
			'We don't have the job so it is just a new job
			f.Intrinsic.Variable.AddRV("Step","New")
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.LookUp.End

Program.Sub.GridButtons.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.iCount.Declare(Long)
	
	'This sub is for expanding and collapsing the Gridview at the bottom of the screen
	f.Intrinsic.Control.If(v.Args.ControlName,=,"CMDEXPAND")
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.ComponentPartsParent.RowCount--,1)
			Gui.F_WoodKit.GsgcView.ExpandMasterRow("ComponentParentGrid",v.Local.iCount)
		f.Intrinsic.Control.Next(v.Local.iCount)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.ComponentPartsParent.RowCount--,1)
			Gui.F_WoodKit.GsgcView.CollapseMasterRow("ComponentParentGrid",v.Local.iCount)
		f.Intrinsic.Control.Next(v.Local.iCount)
	f.Intrinsic.Control.EndIf
	
	gui.F_WoodKit.txtWO.SetFocus
	gui.F_WoodKit.txtWO.SelectAll

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.GridButtons.End

Program.Sub.GsgcView_RowCellClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
	gui.F_WoodKit.txtWO.SetFocus
	gui.F_WoodKit.txtWO.SelectAll

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.GsgcView_RowCellClick.End

Program.Sub.timer1_Timer.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sFile.Declare(String)
	v.Local.bExists.Declare(Boolean)
	v.Local.sRet.Declare(String)
	v.Local.sLine.Declare(String)
	v.Local.sOutput.Declare(String)
	v.Local.iCount.Declare(Long)
	v.Local.iHandle.Declare(Long)
	v.Local.sForm.Declare(String)
	v.Local.sGrid.Declare(String)
	v.Local.sSplit.Declare(String)
	v.Local.iMod.Declare(Long)
	V.Local.sSql.Declare(String)
	V.Local.sErrorDesc.Declare(String)
	V.Local.sTask.Declare(String)
	V.Local.i.Declare(Long,0)
	V.Local.sTaskTemp.Declare(String)
	
'	F.Intrinsic.String.Split(V.Ambient.MemoryInUse,"*!*",V.Local.sTask)
'	F.Intrinsic.Math.Div(V.Local.sTask(0),1024,V.Local.sTask(0))
'	F.Intrinsic.Math.Div(V.Local.sTask(0),1024,V.Local.sTask(0))
'	F.Intrinsic.Math.Div(V.Local.sTask(0),1024,V.Local.sTask(0))
'	F.Intrinsic.String.Format(V.Local.sTask(0),"####0.0000",V.Local.sTask(0))
'	F.Intrinsic.String.Build("Working Memory: {0} GB",V.Local.sTask(0),V.Local.sTaskTemp)
'	F.Intrinsic.Math.Div(V.Local.sTask(1),1024,V.Local.sTask(1))
'	F.Intrinsic.Math.Div(V.Local.sTask(1),1024,V.Local.sTask(1))
'	F.Intrinsic.Math.Div(V.Local.sTask(1),1024,V.Local.sTask(1))
'	F.Intrinsic.String.Format(V.Local.sTask(1),"####0.0000",V.Local.sTask(1))
'	F.Intrinsic.String.Build("{0} Paged Memory: {1} GB",V.Local.sTaskTemp,V.Local.sTask(1),V.Local.sTaskTemp)
'	F.Intrinsic.Math.Div(V.Local.sTask(2),1024,V.Local.sTask(2))
'	F.Intrinsic.Math.Div(V.Local.sTask(2),1024,V.Local.sTask(2))
'	F.Intrinsic.Math.Div(V.Local.sTask(2),1024,V.Local.sTask(2))
'	F.Intrinsic.String.Format(V.Local.sTask(2),"####0.0000",V.Local.sTask(2))
'	F.Intrinsic.String.Build("{0} Garbage Collection Memory: {1} GB",V.Local.sTaskTemp,V.Local.sTask(2),V.Local.sTaskTemp)
'	Gui.Form.lblMem.Caption(V.Local.sTaskTemp)

	'exiting sub if qty override screen is showing
	F.Intrinsic.Control.If(V.Screen.Form_QtyOverride.Visible,=,True)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	Gui.F_WoodKit.timer1.Enabled(False)
	f.Intrinsic.Math.Sub(v.Global.iTimer,1,v.Global.iTimer)
	f.Intrinsic.Control.If(v.Global.iTimer,<=,0)
		F.Intrinsic.Debug.SetLA("Reading Changes")
		f.Intrinsic.Control.BlockEvents
		Gui.F_WoodKit..Enabled(False)
		Gui.Form..Enabled(False)
		
		'Check to see if our directories exist
		f.Intrinsic.String.Build("{0}\4442",v.Caller.FilesDir,v.Local.sFile)
		f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,False)
			'Directory doesn't exist so create it
			f.Intrinsic.Control.Try
			f.Intrinsic.File.CreateDir(v.Local.sFile)
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
		f.Intrinsic.Control.EndIf
		'Check on the next one
		f.Intrinsic.String.Build("{0}\4442\Wood",v.Caller.FilesDir,v.Local.sFile)
		f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,False)
			'Directory doesn't exist so create it
			f.Intrinsic.Control.Try
			f.Intrinsic.File.CreateDir(v.Local.sFile)
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
		f.Intrinsic.Control.EndIf
		'Create a folder for WKTIN
		f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN",v.Caller.FilesDir,v.Local.sFile)
		f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,False)
			'Directory doesn't exist so create it
			f.Intrinsic.Control.Try
			f.Intrinsic.File.CreateDir(v.Local.sFile)
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
		f.Intrinsic.Control.EndIf
		'Create a folder for WKTOUT
		f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT",v.Caller.FilesDir,v.Local.sFile)
		f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,False)
			'Directory doesn't exist so create it
			f.Intrinsic.Control.Try
			f.Intrinsic.File.CreateDir(v.Local.sFile)
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.UI.InvokeWaitDialog("Checking Lock File")
		f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
			f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
		f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
			f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
		f.Intrinsic.Control.EndIf
	'	f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sFile)
		'See if the file exists
	'	f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bExists)
	'	f.Intrinsic.Control.DoUntil(v.Local.bExists,=,False,"OR",v.Local.iCount,=,60)
	'		f.Intrinsic.UI.ChangeWaitStatus("Lock File is active.",v.Local.iCount,0,60)
	'		'File exists so we need to wait until it doesn't exist.
	'		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bExists)
	'		f.Intrinsic.Control.If(v.Local.bExists,=,False)
	'			f.Intrinsic.Control.ExitDo
	'		f.Intrinsic.Control.EndIf
	'		f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
	'		f.Intrinsic.UI.Sleep(1)
	'	f.Intrinsic.Control.Loop
		f.Intrinsic.UI.ChangeWaitStatus("Checking Changes")
		'File no longer exists so we can move forward
		'We need to create the lock file ourself so that another proram will not start reading.
		f.Intrinsic.Control.Try
		f.Intrinsic.File.String2File(v.Local.sFile,"")
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
		
		'we need to read our other file to see if we need to update any files.
		f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Changes_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.Control.EndIf
	'	f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Changes.txt",v.Caller.FilesDir,v.Local.sFile)
		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,True)
			'file exists so we need to read it
			f.Intrinsic.Control.Try
			f.Intrinsic.File.File2String(v.Local.sFile,v.Local.sRet)
			f.Intrinsic.Control.Catch
			f.Intrinsic.Control.EndTry
			'file is in string so we need to split it to get all the rows
			f.Intrinsic.String.Split(v.Local.sRet,v.Ambient.NewLine,v.Local.sRet)
			'now we can loop through each line of the file
			f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sRet.UBound,1)			
				f.Intrinsic.UI.ChangeWaitStatus("Reading Change Lines",v.Local.iCount,0,v.Local.sRet.UBound)
				'we need to first split the line on *!*
				f.Intrinsic.String.Split(v.Local.sRet(v.Local.iCount),"*!*",v.Local.sLine)
				'File is User*!*Table*!*FilePath
				v.Local.sLine.RedimPreserve(0,2)
				f.Intrinsic.Control.If(v.Local.sLine(0).Trim,<>,"")
					'We have something in the User slot
					'Lets check and see if it is ours
					f.Intrinsic.Control.If(v.Local.sLine(0).Trim,<>,v.Caller.User.Trim)
						'it is not our User so we need to do what it says
						f.Intrinsic.File.Exists(v.Local.sLine(2).Trim,v.Local.bExists)
						f.Intrinsic.Control.If(v.Local.bExists,=,True)
							'File exists so lets load it
							f.Data.DataTable.CreateFromXML("XMLTemp",v.Local.sLine(2).Trim,True)
							'added in to removed jobs that have been removed from the grid 
							'added by RLK 5/22/2018
'							F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'								F.ODBC.Connection!Con.OpenCompanyConnection
'							F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.If(V.DataTable.XMLTemp(V.DataTable.XMLTemp.RowCount--).[V.Local.sLine(1).Trim]!FieldValTrim,=,"")
								F.Intrinsic.String.Build("Delete From GCG_4442_Wood_Kit Where Rec_Id = '{0}'",V.Local.sLine(1).Trim,V.Local.sSql)
'								F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'									F.ODBC.Connection!Con.OpenCompanyConnection
'								F.Intrinsic.Control.EndIf
								F.ODBC.Connection!Con.Execute(V.Local.sSql)
								F.Intrinsic.String.Build("Delete From GCG_4442_WOOD_PROG Where Grid = '{0}'",V.Local.sLine(1).Trim,V.Local.sSql)
'								F.Intrinsic.Control.If(Variable.ODBC.Con.State,=,0)
'									F.ODBC.Connection!Con.OpenCompanyConnection
'								F.Intrinsic.Control.EndIf
								F.ODBC.Connection!Con.Execute(V.Local.sSql)
							F.Intrinsic.Control.EndIf
							F.ODBC.Connection!Con.Close
							
							'we need to delete all info from the current DT before merging our data into it.
							f.Data.DataTable.DeleteRow(v.Local.sLine(1).Trim)
							'nowe just merge the data in.
							f.Data.DataTable.Merge("XMLTemp",v.Local.sLine(1).Trim,True,2)
							'we are done merging so delete our temp table
							f.Data.DataTable.Close("XMLTemp")
							'clean up with accept changes
							f.Data.DataTable.AcceptChanges(v.Local.sLine(1).Trim)
							'If it is a slot then update the grid to white and blue header
							f.Intrinsic.Control.If(v.Local.sLine(1).Trim,<>,"Progress")
								'set the cells to white and header to blue
								'Check the grid to see which form it is
								f.Intrinsic.Control.If(v.Local.sLine(1).Right2,<,13)
									v.Local.sForm.Set("F_WoodKit")
								f.Intrinsic.Control.Else
									v.Local.sForm.Set("Form")
								f.Intrinsic.Control.EndIf
								
								F.Intrinsic.String.Build("GsGridControl{0}",V.Local.sLine(1).Trim,V.Local.sGrid)
								F.Intrinsic.String.Build("Reading Changes Grid {0}",V.Local.sGrid,V.Local.sErrorDesc)
								F.Intrinsic.Control.DoEvents
								F.Intrinsic.Debug.SetLA(V.Local.sErrorDesc)
								'adding try catch around set column property to rule out this as the cause of the random errors in the timer sub
								F.Intrinsic.Control.Try
								Gui.[v.Local.sForm].[V.Local.sGrid].SetColumnProperty(v.Local.sLine(1).Trim,v.Local.sLine(1).Trim,"cellbackcolor","White")
								Gui.[v.Local.sForm].[V.Local.sGrid].SetColumnProperty(v.Local.sLine(1).Trim,v.Local.sLine(1).Trim,"headerbackcolor","#0000ff")
								F.Intrinsic.Control.Catch
								F.Intrinsic.Control.EndTry
	'							Gui.[v.Local.sForm].[v.Local.sLine(1).Trim].SetColumnProperty(v.Local.sLine(1).Trim,v.Local.sLine(1).Trim,"cellbackcolor","White")
	'							Gui.[v.Local.sForm].[v.Local.sLine(1).Trim].SetColumnProperty(v.Local.sLine(1).Trim,v.Local.sLine(1).Trim,"headerbackcolor","#0000ff")
	
	'							F.Intrinsic.String.Build("GsGridControl{0}",v.Global.sPrev,V.Local.sGrid)
	'							Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"cellbackcolor","White")
	'							Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"headerbackcolor","#0000ff")
								'We need to update the Progress Bar
								
								V.Local.sSplit.Redim(0,0)
								F.Intrinsic.String.Split(V.DataTable.[v.Local.sLine(1).Trim](4).[v.Local.sLine(1).Trim]!FieldValTrim,"OF",V.Local.sSplit)
								v.Local.sSplit.RedimPreserve(0,1)
								F.Intrinsic.String.Build("ProgressBar{0}",V.Local.sLine(1).Trim,V.Local.sGrid)
								f.Intrinsic.Control.If(v.Local.sSplit(1).Long,<>,0)
									F.Intrinsic.Control.If(v.Local.sSplit(0).Long,>,v.Local.sSplit(1).Long)
										Gui.[v.Local.sForm].[v.Local.sGrid].Value(v.Local.sSplit(1).Long)
									F.Intrinsic.Control.Else
										Gui.[v.Local.sForm].[v.Local.sGrid].Value(v.Local.sSplit(0).Long)
									F.Intrinsic.Control.EndIf
									Gui.[v.Local.sForm].[v.Local.sGrid].Max(v.Local.sSplit(1).Long)
	'								Gui.[v.Local.sForm].[v.Local.sGrid].Value(v.Local.sSplit(0).Long)
								F.Intrinsic.Control.Else
									Gui.[v.Local.sForm].[v.Local.sGrid].Value(0)
								f.Intrinsic.Control.EndIf
	'							Gui.[v.Local.sForm].[v.Local.sGrid].Value(v.Local.sSplit(0).Long)
									
								'Set the button to be visible if it equals max
								F.Intrinsic.String.Build("GsGridControl{0}",v.Local.sLine(1).Trim,V.Local.sGrid)
								f.Intrinsic.Control.If(v.Local.sSplit(0).Long,=,v.Local.sSplit(1).Long,"AND",v.Local.sSplit(1).Long,<>,0)
									Gui.[v.Local.sForm].[V.Local.sGrid].HideRow(v.Local.sLine(1).Trim,5,False)
								f.Intrinsic.Control.Else
									Gui.[v.Local.sForm].[V.Local.sGrid].HideRow(v.Local.sLine(1).Trim,5,True)
								f.Intrinsic.Control.EndIf
								
								Gui.F_WoodKit.GsgcView.MainView("Empty")
									
									
							f.Intrinsic.Control.EndIf
							'Set the progress grid to Empty
	'						Gui.F_WoodKit.GsgcView.MainView("Empty")
							'Delete the File, we updated so we no longer need it
							f.Intrinsic.Control.Try
							f.Intrinsic.File.DeleteFile(v.Local.sLine(2).Trim)
							f.Intrinsic.Control.Catch
							f.Intrinsic.Control.EndTry
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.Else
						'It is our Terminal so we need to write it back to the file
						f.Intrinsic.String.Join(v.Local.sLine,"*!*",v.Local.sLine)
						f.Intrinsic.Variable.AddToArray(v.Local.sOutput,v.Local.sLine)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Next(v.Local.iCount)
			f.Intrinsic.UI.ChangeWaitStatus("Finished Reading Changes")
			
			'We are done with changes.
			'Lets check to see if our output is not blank
			f.Intrinsic.Control.If(v.Local.sOutput.UBound,>,0)
				'we have output so we need to join it and save it back to the file
				f.Intrinsic.String.Join(v.Local.sOutput,v.Ambient.NewLine,v.Local.sOutput)
			f.Intrinsic.Control.EndIf
				'Save it back to the file
				f.Intrinsic.Control.Try
				f.Intrinsic.File.String2File(v.Local.sFile,v.Local.sOutput)
				f.Intrinsic.Control.Catch
				f.Intrinsic.Control.EndTry
		'	f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		
		'either file doesn't exist or we are done reading it.
		'use reset to make sure we don't have any locks on files.
		f.Intrinsic.File.Reset
		'Delete the lock file
		f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
			f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.Control.EndIf
	'	f.Intrinsic.String.Build("{0}\4442\Wood\GCG_4442_Wood_Lock.txt",v.Caller.FilesDir,v.Local.sFile)
		f.Intrinsic.Control.Try
		f.Intrinsic.File.DeleteFile(v.Local.sFile)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
		f.Intrinsic.UI.Sleep(2)
		f.Intrinsic.File.Reset
		
		v.Global.iTimer.Set(60)
		'Gui.F_WoodKit.lblTimer.ForeColor(v.Color.Black)
		'Gui.F_WoodKit.lblTimer.Caption(v.Global.iTimer)
		
		f.Intrinsic.UI.CloseWaitDialog
		
		f.Intrinsic.Control.UnBlockEvents
		
		Gui.F_WoodKit..Enabled(True)
		Gui.Form..Enabled(True)
		Gui.F_WoodKit..AlwaysOnTop(True)
		Gui.F_WoodKit..AlwaysOnTop(False)
		Gui.Form..AlwaysOnTop(True)
		Gui.Form..AlwaysOnTop(False)
	
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.Global.sPrev,<>,"","AND",v.Global.iFlash,<,5)
			f.Intrinsic.Control.If(v.Global.sPrev.Right2,<,13)
				v.Local.sForm.Set("F_WoodKit")
			f.Intrinsic.Control.Else
				v.Local.sForm.Set("Form")
			f.Intrinsic.Control.EndIf
			F.Intrinsic.String.Build("GsGridControl{0}",v.Global.sPrev,V.Local.sGrid)
			f.Intrinsic.Math.Mod(v.Global.iFlash,2,v.Local.iMod)
			F.Intrinsic.String.Build("Changing color of Grid {0}",V.Local.sGrid,V.Local.sErrorDesc)
			F.Intrinsic.Control.DoEvents
			F.Intrinsic.Debug.SetLA(V.Local.sErrorDesc)
			'adding try catch around set column property to rule out this as the cause of the random errors in the timer sub
			F.Intrinsic.Control.Try
			f.Intrinsic.Control.If(v.Local.iMod,=,0)
				Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"CellBackColor","Yellow")
				Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"headerbackcolor","#0000ff")
			f.Intrinsic.Control.Else
				Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"CellBackColor","Red")
				Gui.[v.Local.sForm].[v.Local.sGrid].SetColumnProperty(v.Global.sPrev,v.Global.sPrev,"headerbackcolor","#0000ff")
			f.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Catch
			F.Intrinsic.Control.EndTry
			f.Intrinsic.Math.Add(v.Global.iFlash,1,v.Global.iFlash)
		f.Intrinsic.Control.EndIf
		
		'Change the label color depending on the timer
		f.Intrinsic.Control.If(v.Global.iTimer,<,6)
			'Gui.F_WoodKit.lblTimer.ForeColor(255)
		f.Intrinsic.Control.ElseIf(v.Global.iTimer,<,11)
			'Gui.F_WoodKit.lblTimer.ForeColor(v.Color.Orange)
		f.Intrinsic.Control.Else
			'Gui.F_WoodKit.lblTimer.ForeColor(v.Color.Black)
		f.Intrinsic.Control.EndIf
		'Gui.F_WoodKit.lblTimer.Caption(v.Global.iTimer)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.UnBlockEvents
	Gui.F_WoodKit.timer1.Enabled(True)
	
	Gui.F_WoodKit.txtWO.SetFocus
	'Gui.F_WoodKit.txtWO.SelectAll

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("{0}{1}Last Action:{2}",V.Ambient.ErrorDescription,V.Ambient.NewLine,V.Ambient.LastAction,V.Local.sErrorDesc)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4442_WoodKitting.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Local.sErrorDesc,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.timer1_Timer.End

Program.Sub.CleanupXML.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sFileList.Declare(String)
	v.Local.sFile.Declare(String)
	v.Local.bExists.Declare(Boolean)
	v.Local.iCount.Declare(Long)
	
	f.Intrinsic.UI.ChangeWaitStatus("Cleaning up old files")
	
	'Check to see if our directories exist
	f.Intrinsic.String.Build("{0}\4442",v.Caller.FilesDir,v.Local.sFile)
	f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists,=,False)
		'Directory doesn't exist so create it
		f.Intrinsic.Control.Try
		f.Intrinsic.File.CreateDir(v.Local.sFile)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
	f.Intrinsic.Control.EndIf
	'Check on the next one
	f.Intrinsic.String.Build("{0}\4442\Wood",v.Caller.FilesDir,v.Local.sFile)
	f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists,=,False)
		'Directory doesn't exist so create it
		f.Intrinsic.Control.Try
		f.Intrinsic.File.CreateDir(v.Local.sFile)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
	f.Intrinsic.Control.EndIf
	'Create a folder for WKTIN
	f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN",v.Caller.FilesDir,v.Local.sFile)
	f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists,=,False)
		'Directory doesn't exist so create it
		f.Intrinsic.Control.Try
		f.Intrinsic.File.CreateDir(v.Local.sFile)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
	f.Intrinsic.Control.EndIf
	'Create a folder for WKTOUT
	f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT",v.Caller.FilesDir,v.Local.sFile)
	f.Intrinsic.File.DirExists(v.Local.sFile,v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists,=,False)
		'Directory doesn't exist so create it
		f.Intrinsic.Control.Try
		f.Intrinsic.File.CreateDir(v.Local.sFile)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
	f.Intrinsic.Control.EndIf
	
	'The program has been restarted so lets start off by clearout out old data
	'we will do this by just deleting the whole directory if it is not locked
	f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
		f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
	f.Intrinsic.Control.ElseIf(v.Caller.User.Trim,=,"WKTOUT")
		f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT\GCG_4442_Wood_Lock_{1}.txt",v.Caller.FilesDir,V.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.Control.CallSub(ExistCheck,"sFile",v.Local.sFile)
	f.Intrinsic.Control.EndIf
	'f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bExists)
	'f.Intrinsic.Control.DoUntil(v.Local.bExists,=,False,"OR",v.Local.iCount,=,60)
	'	f.Intrinsic.UI.ChangeWaitStatus("Lock File is active.",v.Local.iCount,0,60)
	'	'loop until it doesn't exist
	'	f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bExists)
	'	f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
	'	f.Intrinsic.UI.Sleep(1)
	'f.Intrinsic.Control.Loop
	
	f.Intrinsic.UI.ChangeWaitStatus("Cleaning up old files")
	
	'not locked so we can delete
	f.Intrinsic.Control.If(v.Caller.User.Trim,=,"WKTIN")
		f.Intrinsic.String.Build("{0}\4442\Wood\WKTIN",v.Caller.FilesDir,v.Local.sFile)
	f.Intrinsic.Control.ElseIf(V.Caller.User.Trim,=,"WKTOUT")
		f.Intrinsic.String.Build("{0}\4442\Wood\WKTOUT",v.Caller.FilesDir,v.Local.sFile)
	f.Intrinsic.Control.Else
		v.Local.sFile.Set("")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.sFile,<>,"")
		f.Intrinsic.Control.Try
			f.Intrinsic.File.DeleteDir(v.Local.sFile)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
		f.Intrinsic.UI.Sleep(2)
		'recreate the directory for later
		f.Intrinsic.Control.Try
		f.Intrinsic.File.CreateDir(v.Local.sFile)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
	f.Intrinsic.Control.EndIf

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.CleanupXML.End

Program.Sub.PrinterLocation.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.sFileName.Declare(String)
	v.Local.bExist.Declare(Boolean)
	v.Local.sSQL.Declare(String)
	
	'We are going to read the printer location from a file and save it for later use.
	f.Intrinsic.String.Build("{0}\GCG_4442_Wood_Printer.dat",v.Caller.FilesDir,v.Local.sFileName)
	'Check to make sure the File exists.
	f.Intrinsic.File.Exists(v.Local.sFileName,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist,=,True)
		'File exists so grab the printer location and save it
		f.Intrinsic.Control.Try
		f.Intrinsic.File.File2String(v.Local.sFileName,v.Global.sPrinter)
		f.Intrinsic.Control.Catch
		f.Intrinsic.Control.EndTry
		v.Global.sPrinter.Set(v.Global.sPrinter.Trim)
		F.Intrinsic.Control.If(Variable.ODBC.Common.State,=,0)
			F.ODBC.Connection!Common.OpenCommonConnection
		F.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("SELECT SENTINELALIAS FROM SERVER_PRINTERS WHERE UCASE(SENTINELALIAS) = '{0}' ",v.Global.sPrinter.UCase,v.Local.sSQL)
		f.ODBC.Connection!Common.OpenLocalRecordsetRO("rstPritner",v.Local.sSQL)
		f.Intrinsic.Control.If(v.ODBC.Common!rstPritner.EOF,=,True)
			'Alias doesn't exist so let them know
			f.Intrinsic.String.Build("Label Printer Alias {0} is not set up from:{1}{2}",v.Global.sPrinter,v.Ambient.NewLine,v.Local.sFileName,v.Local.sFileName)
			f.Intrinsic.UI.Msgbox(v.Local.sFileName,"Attention")
		f.Intrinsic.Control.EndIf
		f.ODBC.Common!rstPritner.Close
		F.Intrinsic.Control.If(V.ODBC.Common.State,=,1)
			f.ODBC.Connection!Common.Close
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		'File doesn't exist
		f.Intrinsic.String.Build("Label Printer is not set up in:{0}{1}",v.Ambient.NewLine,v.Local.sFileName,v.Local.sFileName)
		f.Intrinsic.UI.Msgbox(v.Local.sFileName,"Attention")
	f.Intrinsic.Control.EndIf

	F.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndTry
Program.Sub.PrinterLocation.End

Program.Sub.ExistCheck.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	v.Local.bExists.Declare(Boolean)
	v.Local.iCount.Declare(Long)
	
	f.Intrinsic.File.Exists(v.Args.sFile,v.Local.bExists)
	f.Intrinsic.Control.DoUntil(v.Local.bExists,=,False,"OR",v.Local.iCount,=,60)
		f.Intrinsic.UI.ChangeWaitStatus("Lock File is active.",v.Local.iCount,0,60)
		'loop until it doesn't exist
		f.Intrinsic.File.Exists(v.Args.sFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,False)
				f.Intrinsic.Control.ExitDo
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
		f.Intrinsic.UI.Sleep(1)
	f.Intrinsic.Control.Loop
	f.Intrinsic.Control.DoEvents

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.ExistCheck.End

Program.Sub.cmdRefresh_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
	Gui.F_WoodKit..Visible(False)
	Gui.Form..Visible(False)
	
	f.Intrinsic.UI.InvokeWaitDialog("Refreshing Screen")
	f.Intrinsic.Control.CallSub(BuildEmptyDatatables)
	f.Intrinsic.UI.CloseWaitDialog
	
	Gui.F_WoodKit..Show
	Gui.Form..Show
	Gui.F_WoodKit..AlwaysOnTop(True)
	Gui.F_WoodKit..AlwaysOnTop(False)
	Gui.Form..AlwaysOnTop(True)
	Gui.Form..AlwaysOnTop(False)

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.cmdRefresh_Click.End

Program.Sub.ddlLabelPrinter_GotFocus.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
'	Gui.F_WoodKit.timer1.Enabled(False)

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.ddlLabelPrinter_GotFocus.End

Program.Sub.ddlLabelPrinter_Change.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
'	Gui.F_WoodKit.timer1.Enabled(True)

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.ddlLabelPrinter_Change.End

Program.Sub.ddlLabelPrinter_LostFocus.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
'	Gui.F_WoodKit.timer1.Enabled(True)

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.ddlLabelPrinter_LostFocus.End

Program.Sub.txtQtyOpen_Change.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
	F.Intrinsic.Control.If(V.Screen.Form_QtyOverride!txtQtyOpen.Text,>,V.Screen.Form_QtyOverride!txtQtyNeeded.Text)
		Gui.Form_QtyOverride.txtQtyOpen.Text(v.Screen.Form_QtyOverride!txtQtyNeeded.Text)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.txtQtyOpen_Change.End

Program.Sub.Form_QtyOverride_UnLoad.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	V.Local.bExists.Declare(Boolean,False)
	
	F.Intrinsic.Control.BlockEvents
	
	F.Intrinsic.Variable.ArgExists("Qty",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,=,False)
		Gui.Form_QtyOverride.txtQtyOpen.Text(0)
	F.Intrinsic.Control.EndIf
	
	Gui.Form_QtyOverride..Visible(False)
	
	F.Intrinsic.Control.UnBlockEvents

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.Form_QtyOverride_UnLoad.End

Program.Sub.cmdSubmit_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
	F.Intrinsic.Control.CallSub(Form_QtyOverride_UnLoad,"Qty",V.Screen.Form_QtyOverride!txtQtyOpen.Text)

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.cmdSubmit_Click.End

Program.Sub.txtQtyOpen_KeyPressEnter.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String,"")
	
	F.Intrinsic.Control.If(V.Screen.Form_QtyOverride!txtQtyOpen.Text,>,V.Screen.Form_QtyOverride!txtQtyNeeded.Text)
		Gui.Form_QtyOverride.txtQtyOpen.Text(v.Screen.Form_QtyOverride!txtQtyNeeded.Text)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.CallSub(Form_QtyOverride_UnLoad,"Qty",V.Screen.Form_QtyOverride!txtQtyOpen.Text)

	F.Intrinsic.Control.ExitSub
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
		F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.txtQtyOpen_KeyPressEnter.End

Program.Sub.Connection.Start
F.Intrinsic.Control.Try

'Open or close Connection

V.Static.iConnections.Declare(Long)

F.Intrinsic.Control.If(V.Args.Connect)
	F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
		F.ODBC.Connection!con.OpenCompanyConnection
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Static.iConnections, 1, V.Static.iConnections)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Static.iConnections, >, 0)
		F.Intrinsic.Math.Sub(V.Static.iConnections, 1, V.Static.iConnections)
		
		F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
			F.ODBC.Connection!Con.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch

	F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
			F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}","GCG_4826_SO_WIPTOFG.g2u",V.Ambient.NewLine,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
			F.Intrinsic.UI.Msgbox(V.Local.sError)
			F.Intrinsic.Control.CallSub(Form_UnLoad)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.Connection.End


Program.Sub.Comments.Start
${$0$}$$}$$}$12:00:00 AM$}$False
Program.Sub.Comments.End
